{"version":3,"sources":["enigma_nexus/table/table.cljs"],"mappings":"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","names":["var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","enigma-nexus.table.table/cell","seq69822","G__69823","cljs.core/first","cljs.core/next","self__5751__auto__","props","children","map__69869","cljs.core/--destructure-map","cljs.core.get","data*","row-index","column-index","class","with-let69870","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__67734__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init69871","cljs.core/not","res69872","indicators*","reagent.core/cursor","cljs.core.swap_BANG_","cljs.core/conj","cljs.core/disj","enigma-nexus.table.table/table","map__69929","row-class","cell-class","expanded","cljs.core/deref","rows","cljs.core.take","row-count","cljs.core/count","cljs.core.doall","cljs.core.map_indexed","row","columns","column-count","column","cljs.core/vec","cljs.core.concat","i","c"],"sourcesContent":["(ns enigma-nexus.table.table\r\n  (:require\r\n   [reagent.core :as r :refer [with-let]]))\r\n\r\n(defn cell [props & children] \r\n  \r\n  (let [{:keys [data* row-index column-index class]} props]\r\n  \t\t\t(r/with-let [indicators* (r/cursor data* [:data row-index :data column-index :indicators])]\r\n      ;;  (assert (set? @indicators*) (str \"Indicators missing or not a set: \" (get-in [:data row-index :data column-index] @data*)))\r\n\r\n       [:div {:class class\r\n              :on-click #(swap! indicators* conj :clicked)\r\n              :on-mouse-enter #(swap! indicators* conj :hovered)\r\n              :on-mouse-leave #(swap! indicators* disj :hovered)}\r\n        children])))\r\n\r\n\r\n\r\n(defn table [props] \r\n  (let [{:keys [data* class]} props\r\n        row-class (str class \"-row\")\r\n        cell-class (str class \"-cell\")\r\n        expanded (:expanded @data*)\r\n        rows (if expanded\r\n               (:data @data*)\r\n               (take 1 (:data @data*)))\r\n        row-count (count rows)]\r\n    [:div {:class (str \"table-tab \"\r\n                       class\r\n                       (if expanded \" expanded\"))}\r\n     (doall (map-indexed (fn [row-index row]\r\n                           (let [columns (:data row)\r\n                                 column-count (count columns)]\r\n                             ^{:key (:id row)}\r\n                             [:div {:class (str \"row \" row-class)}\r\n                              (doall (map-indexed (fn [column-index column]\r\n                                                    ^{:key column-index}\r\n                                                    [cell {:class (str \"cell \" cell-class (:class column))\r\n                                                           :data* data*\r\n                                                           :row-index row-index\r\n                                                           :column-index column-index\r\n                                                           :column-count column-count}\r\n                                                     (vec (concat\r\n                                                           [:<> {:key (str (:id column) \"-start\")}\r\n                                                            (map-indexed (fn [i c] ; instead of sending specific content to the skin, we should send function that gets it and changes it on event.\r\n                                                                           [c {:key [row-index (:id column) column-index i]\r\n                                                                               :data* data*\r\n                                                                               :row-index row-index\r\n                                                                               :column-index column-index\r\n                                                                               :value (:data column) \r\n                                                                               :row-count row-count\r\n                                                                               :column-count column-count}]) (:component column))]))]) columns))])) rows))]))\r\n\r\n\r\n\r\n"]}