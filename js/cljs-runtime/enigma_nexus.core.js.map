{"version":3,"sources":["enigma_nexus/core.cljs"],"mappings":"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","names":["enigma-nexus.core/router","reitit.frontend.router","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","enigma-nexus.core/path-for","p__60692","vec__60693","cljs.core.nth","seq60690","G__60691","cljs.core/first","cljs.core/next","self__5751__auto__","route","params","reitit.frontend.match_by_name","enigma-nexus.core/draw-table-array","props","enigma-nexus.core/draw-tree-array","enigma-nexus.core/array-of-maps","enigma-nexus.core/complex-data-1","enigma-nexus.core/complex-data-2","enigma-nexus.core/sut-data","enigma-nexus.core/main-menu","with-let60698","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__59044__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init60699","res60700","map__60701","cljs.core/--destructure-map","cljs.core.get","page*","cljs.core.swap_BANG_","cljs.core/conj","reagent.core.atom","enigma-nexus.tree.state/compile-to-tree","enigma-nexus.tree.tree/tree-widget","ev","reader","js/FileReader","file","e","doc","cljs.core.js__GT_clj","js/JSON.parse","p1__60696#","cljs.core/deref","cljs.core.filter","cljs.core._EQ_","js/encodeURIComponent","js/JSON.stringify","cljs.core/clj->js","enigma-nexus.tree.state/decompile-from-tree","cljs.core.get_in","p1__60697#","enigma-nexus.table.skins/compile-to-table","enigma-nexus.table.table/table","empty-table*","enigma-nexus.tabs.state/add-new-tab","enigma-nexus.tabs.tabs/tabs","enigma-nexus.tree.state/demo-data-from-figma","enigma-nexus.core/home-page","with-let60702","init60703","cljs.core/not","res60704","main-table*","enigma-nexus.tabs.state/figma-tab","enigma-nexus.tabs.state/empty-tab","enigma-nexus.core/items-page","cljs.core.map","item-id","enigma_nexus.core.path_for","cljs.core.range","enigma-nexus.core/item-page","routing-data","reagent.session/get","item","enigma-nexus.core/about-page","enigma-nexus.core/page-for","enigma-nexus.core/current-page","page","enigma-nexus.core/mount-root","reagent.dom.render","js/document","enigma-nexus.core/init!","clerk.core/initialize!","accountant.core/configure-navigation!","path","match","reitit.frontend.match_by_path","current-page","route-params","reagent.core/after-render","clerk.core/after-render!","reagent.session/put!","clerk.core/navigate-page!","cljs.core/boolean","accountant.core/dispatch-current!","enigma-nexus.core/reload!"],"sourcesContent":["(ns enigma-nexus.core\n  (:require\n   [enigma-nexus.tabs.tabs :refer [tabs]]\n   [enigma-nexus.table.table :refer [table]]\n   [enigma-nexus.tree.state :refer [demo-data-from-figma compile-to-tree decompile-from-tree]]\n   [enigma-nexus.tree.tree :refer [node tree-widget]]\n   [enigma-nexus.table.skins :refer [compile-array-to-table-bfs compile-map-to-table-bfs compile-set-to-table-bfs compile-scalar-to-table compile-to-table\n                                     compile-array-to-table-dfs compile-map-to-table-dfs compile-set-to-table-dfs]]\n   [enigma-nexus.tabs.state :refer [add-new-tab empty-tab figma-tab]]\n   [reagent.core :as r :refer [atom]]\n   [reagent.dom :as rdom]\n   [reagent.session :as session]\n   [reitit.frontend :as reitit]\n   [clerk.core :as clerk]\n   [accountant.core :as accountant]))\n\n;; -------------------------\n;; Routes\n\n(def router\n  (reitit/router\n   [[\"/\" :index]\n    [\"/items\"\n     [\"\" :items]\n     [\"/:item-id\" :item]]\n    [\"/about\" :about]]))\n\n(defn path-for [route & [params]]\n  (if params\n    (:path (reitit/match-by-name router route params))\n    (:path (reitit/match-by-name router route))))\n\n\n(defn draw-table-array [props]\n  [:div \"table\"])\n\n(defn draw-tree-array [props]\n  [:div \"tree\"])\n\n(def array-of-maps [{:a 10 :b 20}\n                    {:a 10 :b 20}])\n\n(def complex-data-1 [[\"a\" \"b\" [[\"q\" \"w\" \"e\"]\n                               [\"q\" \"w\" \"e\"]] \"d\"]\n                     [\"e\" \"f\" [1 2 3] \"h\"]\n                     [{:likes [1 2 3 4]}\n                      {:better [{:table 10 :tree 5}\n                                {:table 20 :tree 7}\n                                {:table 30 :tree 9}]}\n                      {}\n                      {:last 999}]\n                     [{:a 10 :b 1} {:a 20 :b 2} {:a 30 :b 3}]\n                     [\"m\" \"n\" \"o\" \"p\"]])\n\n(def complex-data-2 [[\"a\" \"b\" \"c\" \"d\"]\n                     [\"0\" 19 22 74]\n                     [\"1\" [[\":q\" \":w\"]\n                           [8 9]] 80 90]\n                     [\"2\" {:q 8 :w 9} 100 120]])\n\n(def sut-data {:os \"null\",\n               :preDeployedOS \"null\",\n               :role \"SystemUnderTest\",\n               :hostname \"172.2.21.31\",\n               :user \"null\",\n               :password \"null\",\n               :location \"PTK\",\n               :locationIIS \"null\"\n               :duts [{:name \"StanleyChannelQP_Fused\",\n                       :vendor \"OemGen\",\n                       :PBA \"N32446-001\",\n                       :slot \"2\",\n                       :PCIeGen \"4\",\n                       :NumOfLanes \"x8\",\n                       :Chips [{:index 1,\n                                :rpi {:ipAddress \"172.2.21.35\",\n                                      :port \"1\",\n                                      :em100SN \"EM147649\",\n                                      :PDU {:vendor \"Eaton\",\n                                            :ipAddress \"172.2.21.2\",\n                                            :outlet \"11\"}},\n                                :ports [{:deviceIndex 1,\n                                         :linkPartner {:switch \"NEOR2W2RK2-A-LP\",\n                                                       :port \"37\"},\n                                         :applicationPartner {:ipAddress \"1.2.3.4\",\n                                                              :user \"linkUser\",\n                                                              :password \"linkPassword\"}},\n                                        {:deviceIndex 2,\n                                         :linkPartner {:switch \"NEOR2W2RK2-A-LP\",\n                                                       :port \"40\"},\n                                         :applicationPartner {:ipAddress \"1.2.3.4\",\n                                                              :user \"linkUser\",\n                                                              :password \"linkPassword\"}},\n                                        {:deviceIndex 3,\n                                         :linkPartner {:switch \"NEOR2W2RK2-A-LP\",\n                                                       :port \"43\"},\n                                         :applicationPartner {:ipAddress \"1.2.3.4\",\n                                                              :user \"linkUser\",\n                                                              :password \"linkPassword\"}},\n                                        {:deviceIndex 4,\n                                         :linkPartner {:switch \"NEOR2W2RK2-A-LP\",\n                                                       :port \"46\"},\n                                         :applicationPartner {:ipAddress \"1.2.3.4\",\n                                                              :user \"linkUser\",\n                                                              :password \"linkPassword\"}},\n                                        {:deviceIndex 5,\n                                         :linkPartner {:switch \"NEOR2W2RK2-A-LP\",\n                                                       :port \"37\"},\n                                         :applicationPartner {:ipAddress \"1.2.3.4\",\n                                                              :user \"linkUser\",\n                                                              :password \"linkPassword\"}},\n                                        {:deviceIndex 6,\n                                         :linkPartner {:switch \"NEOR2W2RK2-A-LP\",\n                                                       :port \"40\"},\n                                         :applicationPartner {:ipAddress \"1.2.3.4\",\n                                                              :user \"linkUser\",\n                                                              :password \"linkPassword\"}},\n                                        {:deviceIndex 7,\n                                         :linkPartner {:switch \"NEOR2W2RK2-A-LP\",\n                                                       :port \"43\"},\n                                         :applicationPartner {:ipAddress \"1.2.3.4\",\n                                                              :user \"linkUser\",\n                                                              :password \"linkPassword\"}},\n                                        {:deviceIndex 8,\n                                         :linkPartner {:switch \"NEOR2W2RK2-A-LP\",\n                                                       :port \"46\"},\n                                         :applicationPartner {:ipAddress \"1.2.3.4\",\n                                                              :user \"linkUser\",\n                                                              :password \"linkPassword\"}}]}]}],\n               :appSettings {},\n               :rpi {:ipAddress \"172.2.21.35\",\n                     :user \"lab\",\n                     :password \"root00\",\n                     :serial \"ttyUSB0\",\n                     :speed \"115200\"},\n               :bmc {:type \"idrac9\",\n                     :hostname \"172.2.21.33\",\n                     :user \"admin\",\n                     :password \"root0000\"},\n               :PDU {:vendor \"Eaton\",\n                     :ipAddress \"172.2.22.1\",\n                     :outlet \"12\"},\n               :iscsi {:hostname \"172.16.0.12\",\n                       :user \"administrator\",\n                       :password \"\"}})\n\n;; -------------------------\n;; Page components\n\n(defn main-menu [props]\n  (r/with-let []\n    (let [{:keys [page*]} props]\n      [:div {:class \"main-menu\"}\n       [:div\n        [:button {:on-click (fn []\n                            ;  (js/console.log (js/JSON.stringify (clj->js (array-to-tree {:a [1]}))))\n                              (swap! page* conj {:side :right\n                                                 :props {:tree* (r/atom (compile-to-tree sut-data))}\n                                                 :component tree-widget}))} \"Add Tree\"]]\n\n       [:div\n        [:input {:type \"file\"\n                 :on-change (fn [ev]\n                              (let [reader (js/FileReader.)\n                                    file (first (.. ev -target -files))]\n                                (set! (.-onload reader)\n                                      (fn [e]\n                                        (let [doc (js->clj (js/JSON.parse (.-result (.-target e))))]\n                                          (swap! page* conj {:side :right\n                                                             :id :file\n                                                             :props {:tree* (r/atom (compile-to-tree doc))}\n                                                             :component tree-widget}))))\n                                (.readAsText reader file)))}]\n\n        (if (first (filter #(= (:id %) :file) @page*))\n          [:a {:href (str \"data:text/json;charset=utf-8,\"\n                          (js/encodeURIComponent (js/JSON.stringify\n                                                  (clj->js (decompile-from-tree @(get-in (first (filter #(= (:id %) :file) @page*)) [:props :tree*])))\n                                                  nil\n                                                  2)))\n               :download \"data.json\"}\n           \"Download\"])]\n\n       [:div\n        [:button {:on-click (fn []\n                              (swap! page* conj {:side :right\n                                                 :props {:table-data* (r/atom (compile-to-table {:a 10 :b 20 :c 30}))\n                                                         :class \"main-table\"}\n                                                 :component table})\n                              (swap! page* conj {:side :right\n                                                 :props {:table-data* (r/atom (compile-to-table [[:a :b :c]\n                                                                                                 [10 20 30]]))\n                                                         :class \"main-table\"}\n                                                 :component table}))} \"Add Table\"]]\n\n       [:div\n        [:button {:on-click (fn []\n                              (let [empty-table* (r/atom [])]\n                                (add-new-tab empty-table* 4 4)\n                                (swap! page* conj {:side :right\n                                                   :props {:multi-tab-table* empty-table*\n                                                           :class \"main-table\"}\n                                                   :component tabs})))} \"Add Table\"]]\n\n       [:div\n        [:button {:on-click (fn []\n                              (let []\n                                (swap! page* conj {:side :right\n                                                   :props {}\n                                                   :component (fn [] [:div \"Hello World\"])})))} \"Add Text\"]]\n\n       [:div\n        [:button {:on-click (fn []\n                              (let []\n                                (swap! page* conj {:side :right\n                                                   :props {:tree* demo-data-from-figma}\n                                                   :component tree-widget})))} \"Add Tree 2\"]]])))\n\n; multi-tab-table*\n; still missing:\n;   1. Put things that are not tables inside tabs\n;   2. Put other things (that are not tabs) on the page\n\n; multi-tab-table* = [table table table table]\n; page*  = [{:props ... :component ...} {:props ... :children ...} {:props ... :children ...}] \n(defn home-page []\n  (r/with-let [main-table* (r/atom [(figma-tab \"Test Matrix\")\n                                    (empty-tab 8 4 \"Team\")\n                                    (empty-tab 2 2 \"Other\")\n                                    (empty-tab 2 2 \"Task Board\")\n                                    (empty-tab 2 2 \"Projects\")\n                                    (empty-tab 2 2 \"Task 2.1.1\")])]\n\n    [:main\n     [:div.left\n      [tree-widget {:tree* demo-data-from-figma}]]\n     [:div.right\n      [:h1 \"Table View\"]\n      [tabs {:multi-tab-table* main-table*\n             :class \"main-table\"}]]]))\n\n\n\n(defn items-page []\n  (fn []\n    [:span.main\n     [:h1 \"The items of enigma-nexus\"]\n     [:ul (map (fn [item-id]\n                 [:li {:name (str \"item-\" item-id) :key (str \"item-\" item-id)}\n                  [:a {:href (path-for :item {:item-id item-id})} \"Item: \" item-id]])\n               (range 1 60))]]))\n\n\n(defn item-page []\n  (fn []\n    (let [routing-data (session/get :route)\n          item (get-in routing-data [:route-params :item-id])]\n      [:span.main\n       [:h1 (str \"Item \" item \" of enigma-nexus\")]\n       [:p [:a {:href (path-for :items)} \"Back to the list of items\"]]])))\n\n\n(defn about-page []\n  (fn [] [:span.main\n          [:h1 \"About enigma-nexus\"]]))\n\n\n;; -------------------------\n;; Translate routes -> page components\n\n(defn page-for [route]\n  #'home-page)\n\n\n;; -------------------------\n;; Page mounting component\n\n(defn current-page []\n  (fn []\n    (let [page (:current-page (session/get :route))]\n      [page])))\n\n;; -------------------------\n;; Initialize app\n\n(defn mount-root []\n  (rdom/render [current-page] (.getElementById js/document \"app\")))\n\n(defn init! []\n  (clerk/initialize!)\n  (accountant/configure-navigation!\n   {:nav-handler\n    (fn [path]\n      (let [match (reitit/match-by-path router path)\n            current-page (:name (:data  match))\n            route-params (:path-params match)]\n        (r/after-render clerk/after-render!)\n        (session/put! :route {:current-page (page-for current-page)\n                              :route-params route-params})\n        (clerk/navigate-page! path)))\n    :path-exists?\n    (fn [path]\n      (boolean (reitit/match-by-path router path)))})\n  (accountant/dispatch-current!)\n  (mount-root))\n\n(defn ^:dev/after-load reload! []\n  (mount-root))\n"]}