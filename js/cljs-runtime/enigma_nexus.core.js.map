{"version":3,"sources":["enigma_nexus/core.cljs"],"mappings":"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","names":["enigma-nexus.core/router","reitit.frontend.router","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","enigma-nexus.core/path-for","p__63269","vec__63270","cljs.core.nth","seq63267","G__63268","cljs.core/first","cljs.core/next","self__5751__auto__","route","params","reitit.frontend.match_by_name","enigma-nexus.core/main-menu","props","with-let63275","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__59044__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init63276","res63277","map__63278","cljs.core/--destructure-map","cljs.core.get","page*","cljs.core.swap_BANG_","cljs.core/conj","reagent.core.atom","cljs.core.merge","enigma-nexus.compile.rw-schema/compile-to-tree","enigma-nexus.compile.demo/sut-data","enigma-nexus.tree.rw.tree/tree-widget","enigma-nexus.compile.ro-schema/compile-to-tree","enigma-nexus.tree.ro.tree/tree-widget","ev","reader","js/FileReader","file","e","doc","cljs.core.js__GT_clj","js/JSON.parse","p1__63273#","cljs.core/deref","cljs.core.filter","cljs.core._EQ_","js/encodeURIComponent","js/JSON.stringify","cljs.core/clj->js","enigma-nexus.compile.rw-schema/decompile-from-tree","cljs.core.get_in","p1__63274#","enigma-nexus.compile.rw-schema/compile-to-table","enigma-nexus.table.table/table","empty-table*","enigma-nexus.tabs.state/add-new-tab","enigma-nexus.tabs.tabs/tabs","enigma-nexus.compile.demo/demo-data-from-figma","enigma-nexus.core/home-page","with-let63281","init63282","cljs.core/not","res63283","left","p1__63279#","right","p1__63280#","cljs.core.doall","cljs.core.map_indexed","p__63284","map__63285","index","component","p__63286","map__63287","enigma-nexus.core/items-page","cljs.core.map","item-id","enigma_nexus.core.path_for","cljs.core.range","enigma-nexus.core/item-page","routing-data","reagent.session/get","item","enigma-nexus.core/about-page","enigma-nexus.core/page-for","enigma-nexus.core/current-page","page","enigma-nexus.core/mount-root","reagent.dom.render","js/document","enigma-nexus.core/init!","clerk.core/initialize!","accountant.core/configure-navigation!","path","match","reitit.frontend.match_by_path","current-page","route-params","reagent.core/after-render","clerk.core/after-render!","reagent.session/put!","clerk.core/navigate-page!","cljs.core/boolean","accountant.core/dispatch-current!","enigma-nexus.core/reload!"],"sourcesContent":["(ns enigma-nexus.core\n  (:require\n   [enigma-nexus.tabs.tabs :refer [tabs]] \n   [enigma-nexus.table.table :refer [table]]\n   [enigma-nexus.compile.demo :refer [demo-data-from-figma sut-data ]] \n   [enigma-nexus.tree.ro.tree :as ro-tree] \n   [enigma-nexus.tree.rw.tree :as rw-tree]\n   [enigma-nexus.compile.rw-schema :as rw-schema] \n   [enigma-nexus.compile.ro-schema :as ro-schema] \n   [enigma-nexus.tabs.state :refer [add-new-tab]]\n   [reagent.core :as r :refer [atom]]\n   [reagent.dom :as rdom]\n   [reagent.session :as session]\n   [reitit.frontend :as reitit]\n   [clerk.core :as clerk]\n   [accountant.core :as accountant]))\n\n;; -------------------------\n;; Routes\n\n(def router\n  (reitit/router\n   [[\"/\" :index]\n    [\"/items\"\n     [\"\" :items]\n     [\"/:item-id\" :item]]\n    [\"/about\" :about]]))\n\n(defn path-for [route & [params]]\n  (if params\n    (:path (reitit/match-by-name router route params))\n    (:path (reitit/match-by-name router route))))\n\n\n;; -------------------------\n;; Page components\n\n(defn main-menu [props]\n  (r/with-let []\n    (let [{:keys [page*]} props]\n      [:div {:class \"main-menu\"}\n       [:div\n        [:button {:on-click (fn []\n                            ;  (js/console.log (js/JSON.stringify (clj->js (array-to-tree {:a [1]}))))\n                              (swap! page* conj {:side :right\n                                                 :props {:tree* (r/atom (merge\n                                                                         {:class \"main-tree\"}\n                                                                         (rw-schema/compile-to-tree sut-data)))}\n                                                 :component rw-tree/tree-widget}))} \"Add RW Schema Tree (SUT Data)\"]]\n\n       [:div\n        [:button {:on-click (fn []\n                              (swap! page* conj {:side :right\n                                                 :props {:tree* (r/atom (ro-schema/compile-to-tree sut-data))}\n                                                 :component ro-tree/tree-widget}))} \"Add RO Schema Tree (SUT Data)\"]]\n\n\n\n       [:div\n        [:input {:type \"file\"\n                 :on-change (fn [ev]\n                              (let [reader (js/FileReader.)\n                                    file (first (.. ev -target -files))]\n                                (set! (.-onload reader)\n                                      (fn [e]\n                                        (let [doc (js->clj (js/JSON.parse (.-result (.-target e))))]\n                                          (swap! page* conj {:side :right\n                                                             :id :file\n                                                             :props {:tree* (r/atom (rw-schema/compile-to-tree doc))}\n                                                             :component rw-tree/tree-widget}))))\n                                (.readAsText reader file)))}]\n\n        (if (first (filter #(= (:id %) :file) @page*))\n          [:a {:href (str \"data:text/json;charset=utf-8,\"\n                          (js/encodeURIComponent (js/JSON.stringify\n                                                  (clj->js (rw-schema/decompile-from-tree @(get-in (first (filter #(= (:id %) :file) @page*)) [:props :tree*])))\n                                                  nil\n                                                  2)))\n               :download \"data.json\"}\n           \"Download\"])]\n\n       [:div\n        [:button {:on-click (fn []\n                              (swap! page* conj {:side :right\n                                                 :props {:table-data* (r/atom (rw-schema/compile-to-table [[1 2 3]\n                                                                                                           [4 5 6]\n                                                                                                           [8]]))\n                                                         :class \"main-table\"}\n                                                 :component table}))} \"Add SUT Data Table Table\"]]\n\n       [:div\n        [:button {:on-click (fn []\n                              (let [empty-table* (r/atom [])]\n                                (add-new-tab empty-table* 4 4)\n                                (swap! page* conj {:side :right\n                                                   :props {:multi-tab-table* empty-table*\n                                                           :class \"main-table\"}\n                                                   :component tabs})))} \"Add Table\"]]\n\n       [:div\n        [:button {:on-click (fn []\n                              (let []\n                                (swap! page* conj {:side :right\n                                                   :props {}\n                                                   :component (fn [] [:div \"Hello World\"])})))} \"Add Text\"]]\n\n       [:div\n        [:button {:on-click (fn []\n                              (let []\n                                (swap! page* conj {:side :right\n                                                   :props {:tree* demo-data-from-figma}\n                                                   :component rw-tree/tree-widget})))} \"Add Tree 2\"]]])))\n\n; multi-tab-table*\n; still missing:\n;   1. Put things that are not tables inside tabs\n;   2. Put other things (that are not tabs) on the page\n\n; multi-tab-table* = [table table table table]\n; page*  = [{:props ... :component ...} {:props ... :children ...} {:props ... :children ...}] \n(defn home-page []\n  (r/with-let [page* (r/atom [])]\n    (let [left (filter #(= (:side %) :left) @page*)\n          right (filter #(= (:side %) :right) @page*)] \n\n      [:div.container {:key \"homepage\"}\n       [:div {:class \"left\"}\n        (doall (map-indexed (fn [index {:keys [props component]}]\n                              ^{:key [component \"left\" index]}\n                              [component props]) left))]\n\n       [:div {:class \"right\"}\n        [main-menu {:page* page*}] \n\n        (doall (map-indexed (fn [index {:keys [props component]}]\n                              ^{:key [component \"right\" index]}\n                              [component props]) right))]])))\n\n\n\n(defn items-page []\n  (fn []\n    [:span.main\n     [:h1 \"The items of enigma-nexus\"]\n     [:ul (map (fn [item-id]\n                 [:li {:name (str \"item-\" item-id) :key (str \"item-\" item-id)}\n                  [:a {:href (path-for :item {:item-id item-id})} \"Item: \" item-id]])\n               (range 1 60))]]))\n\n\n(defn item-page []\n  (fn []\n    (let [routing-data (session/get :route)\n          item (get-in routing-data [:route-params :item-id])]\n      [:span.main\n       [:h1 (str \"Item \" item \" of enigma-nexus\")]\n       [:p [:a {:href (path-for :items)} \"Back to the list of items\"]]])))\n\n\n(defn about-page []\n  (fn [] [:span.main\n          [:h1 \"About enigma-nexus\"]]))\n\n\n;; -------------------------\n;; Translate routes -> page components\n\n(defn page-for [route]\n  #'home-page)\n\n\n;; -------------------------\n;; Page mounting component\n\n(defn current-page []\n  (fn []\n    (let [page (:current-page (session/get :route))]\n      [page])))\n\n;; -------------------------\n;; Initialize app\n\n(defn mount-root []\n  (rdom/render [current-page] (.getElementById js/document \"app\")))\n\n(defn init! []\n  (clerk/initialize!)\n  (accountant/configure-navigation!\n   {:nav-handler\n    (fn [path]\n      (let [match (reitit/match-by-path router path)\n            current-page (:name (:data  match))\n            route-params (:path-params match)]\n        (r/after-render clerk/after-render!)\n        (session/put! :route {:current-page (page-for current-page)\n                              :route-params route-params})\n        (clerk/navigate-page! path)\n        ))\n    :path-exists?\n    (fn [path]\n      (boolean (reitit/match-by-path router path)))})\n  (accountant/dispatch-current!)\n  (mount-root))\n\n(defn ^:dev/after-load reload! []\n  (mount-root))\n"]}