{"version":3,"sources":["enigma_nexus/core.cljs"],"mappings":"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","names":["enigma-nexus.core/router","reitit.frontend.router","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","enigma-nexus.core/path-for","p__65970","vec__65971","cljs.core.nth","seq65968","G__65969","cljs.core/first","cljs.core/next","self__5751__auto__","route","params","reitit.frontend.match_by_name","enigma-nexus.core/demo-class-function","root*","path","state","with-let65974","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__59148__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init65975","cljs.core/not","res65976","data*","reagent.core/cursor","vec__65977","last-in-state","cljs.core/peek","is-table","is-tree","_","row","column","cljs.core/take-last","is-header","and__5041__auto__","cljs.core._EQ_","p__65980","map__65981","cljs.core/--destructure-map","cljs.core.get","enigma-nexus.core/server-table-menu-item","page*","with-let65982","init65983","res65984","reagent.core.atom","ev","data","cljs.core/deref","enigma-nexus.compile.data-widget/decompile-from-tree","js/fetch","cljs.core/clj->js","js/JSON.stringify","r","cljs.core/js->clj","js/console.log","enigma-nexus.compile.data-widget/compile-to-tree","cljs.core/reset!","cljs.core.swap_BANG_","cljs.core/conj","enigma-nexus.compile.demo/figma-table-ui-props","enigma-nexus.data-widget.data-widget/data-widget","enigma-nexus.core/main-menu","props","with-let65985","init65986","res65987","map__65988","enigma-nexus.compile.demo/sutdata-ui-props","enigma-nexus.compile.demo/sut-data","enigma-nexus.compile.demo/figma-table","enigma-nexus.core/home-page","with-let65991","init65992","res65993","left","p1__65989#","cljs.core.filter","right","p1__65990#","cljs.core.doall","cljs.core.map_indexed","p__65994","map__65995","index","component","enigma-nexus.evaluator.evaluator/evaluator","p__65996","map__65997","enigma-nexus.core/items-page","cljs.core.map","item-id","enigma_nexus.core.path_for","cljs.core.range","enigma-nexus.core/item-page","routing-data","reagent.session/get","item","cljs.core.get_in","enigma-nexus.core/about-page","enigma-nexus.core/page-for","enigma-nexus.core/current-page","page","enigma-nexus.core/mount-root","reagent.dom.render","js/document","enigma-nexus.core/init!","clerk.core/initialize!","accountant.core/configure-navigation!","match","reitit.frontend.match_by_path","current-page","route-params","reagent.core/after-render","clerk.core/after-render!","reagent.session/put!","clerk.core/navigate-page!","cljs.core/boolean","accountant.core/dispatch-current!","enigma-nexus.core/reload!"],"sourcesContent":["(ns enigma-nexus.core\n  (:require \n   [enigma-nexus.data-widget.data-widget :as data-widget]\n   [enigma-nexus.evaluator.evaluator :as evaluator]\n   [enigma-nexus.data-widget.skins :as data-widget-skin]\n   [enigma-nexus.compile.demo :refer [sut-data figma-table figma-table-ui-props sutdata-ui-props]] \n   [enigma-nexus.compile.data-widget :as compile-data-widget] \n   [reagent.core :as r :refer [atom]]\n   [reagent.dom :as rdom]\n   [reagent.session :as session]\n   [reitit.frontend :as reitit]\n   [clerk.core :as clerk]\n   [accountant.core :as accountant]))\n\n;; -------------------------\n;; Routes\n\n(def router\n  (reitit/router\n   [[\"/\" :index]\n    [\"/items\"\n     [\"\" :items]\n     [\"/:item-id\" :item]]\n    [\"/about\" :about]]))\n\n(defn path-for [route & [params]]\n  (if params\n    (:path (reitit/match-by-name router route params))\n    (:path (reitit/match-by-name router route))))\n\n\n;; -------------------------\n;; Page components\n(defn demo-class-function [root* path state]\n  (r/with-let [data* (r/cursor root* path)]\n    (let [last-in-state (peek state)\n          is-table (:table last-in-state)\n          is-tree (:tree last-in-state)\n          [_ row _ column] (take-last 4 path)\n          is-header (and is-table (= row 0))]\n\n      (cond\n        is-table (if is-header \"dw-table-row table-header\" \"dw-table-row\")\n        is-tree \"is-tree\"\n        :else \"data-cell\"))))\n\n(defn server-table-menu-item [{:keys [page*]}]\n  (r/with-let [data* (r/atom nil)]\n  [:div\n   [:button {:on-click (fn [ev]\n                         (let [data (compile-data-widget/decompile-from-tree @data*)]\n                           (js/fetch \"/data\"\n                                     (clj->js {:method \"POST\"\n                                               :headers {\"Content-Type\" \"application/json\"\n                                                         \"Accept\" \"application/json\"}\n                                               :body (js/JSON.stringify (clj->js data))}))))}\n    \"Save table\"]\n   [:button {:on-click (fn []\n                         (->\n                          (js/fetch \"/data\")\n                          (.then (fn [r] (.json r)))\n                          (.then js->clj)\n                          (.then (fn [data]\n                                   (js/console.log (clj->js data))\n                                   (js/console.log (clj->js (compile-data-widget/compile-to-tree data)))\n                                   (reset! data* (compile-data-widget/compile-to-tree data))\n                                   (swap! page* conj {:side :right\n                                                      :props {:ui-props-fn figma-table-ui-props\n                                                              :path []\n                                                              :root* data*}\n  \n                                                      :component data-widget/data-widget})))))} \"Show Table From Server\"]]))\n\n(defn main-menu [props]\n  (r/with-let []\n    (let [{:keys [page*]} props]\n      [:div {:class \"main-menu\"}\n       [:div\n        [:button {:on-click (fn []\n                              ;; (js/console.log (js/JSON.stringify (clj->js (compile-data-widget/compile-to-tree {:a 10}))))\n                              (swap! page* conj {:side :right\n                                                 :props {:ui-props-fn sutdata-ui-props\n                                                         :path []\n                                                         :root* (r/atom (compile-data-widget/compile-to-tree sut-data))}\n\n                                                 :component data-widget/data-widget}))} \"1.5 Add Figma Schema Tree (SUT Data)\"]]\n       \n\n       [:div\n        [:button {:on-click (fn []\n                              (let []\n                                (swap! page* conj {:side :right\n                                                   :props {:ui-props-fn figma-table-ui-props\n                                                           :path []\n                                                           :root* (r/atom figma-table)}\n                                                   :component data-widget/data-widget})))} \"10. Add Figma Table\"]]])))\n\n; multi-tab-table*\n; still missing:\n;   1. Put things that are not tables inside tabs\n;   2. Put other things (that are not tabs) on the page\n\n; multi-tab-table* = [table table table table]\n; page*  = [{:props ... :component ...} {:props ... :children ...} {:props ... :children ...}] \n(defn home-page []\n  (r/with-let [page* (r/atom [])]\n    (let [left (filter #(= (:side %) :left) @page*)\n          right (filter #(= (:side %) :right) @page*)]\n\n      [:div.container {:key \"homepage\"}\n       [:div {:class \"left\"}\n        (doall (map-indexed (fn [index {:keys [props component]}]\n                              ^{:key [component \"left\" index]}\n                              [component props]) left))]\n\n       [:div {:class \"right\"}\n        [main-menu {:page* page*}]\n        [evaluator/evaluator]\n\n        (doall (map-indexed (fn [index {:keys [props component]}]\n                              ^{:key [component \"right\" index]}\n                              [component props]) right))]])))\n\n;; (defn schema-editor-scalar [{:keys [root* path]}]\n;;   [:p \"A\"])\n\n;; (defn home-page []\n;;   (r/with-let [step (r/atom 1)]\n;;     [:div.container\n;;      [:div {:style {:padding \"10px 0\"}}\n;;       [:button {:on-click #(reset! step 2)}\n;;        \"Add Map\"]\n;;       [:button \"Add Vector\"]]\n\n;;      (cond\n;;        (= @step 1) [:div \"Select Something...\"]\n;;        (= @step 2) [:div\n;;                     [:label\n;;                      \"Key\"\n;;                      [:input]]\n;;                     [:label \"Single Select\" [:input {:type \"checkbox\"}]]\n;;                     [:label \"Multi Select\" [:input {:type \"checkbox\"}]]\n;;                     [:label \"Menu\" [:input {:type \"checkbox\"}]]\n;;                     [:label \"Editable Text\" [:input {:type \"checkbox\"}]]\n;;                     [:button \"Save\"]])]))\n\n\n\n(defn items-page []\n  (fn []\n    [:span.main\n     [:h1 \"The items of enigma-nexus\"]\n     [:ul (map (fn [item-id]\n                 [:li {:name (str \"item-\" item-id) :key (str \"item-\" item-id)}\n                  [:a {:href (path-for :item {:item-id item-id})} \"Item: \" item-id]])\n               (range 1 60))]]))\n\n\n(defn item-page []\n  (fn []\n    (let [routing-data (session/get :route)\n          item (get-in routing-data [:route-params :item-id])]\n      [:span.main\n       [:h1 (str \"Item \" item \" of enigma-nexus\")]\n       [:p [:a {:href (path-for :items)} \"Back to the list of items\"]]])))\n\n\n(defn about-page []\n  (fn [] [:span.main\n          [:h1 \"About enigma-nexus\"]]))\n\n\n;; -------------------------\n;; Translate routes -> page components\n\n(defn page-for [route]\n  #'home-page)\n\n\n;; -------------------------\n;; Page mounting component\n\n(defn current-page []\n  (fn []\n    (let [page (:current-page (session/get :route))]\n      [page])))\n\n;; -------------------------\n;; Initialize app\n\n(defn mount-root []\n  (rdom/render [current-page] (.getElementById js/document \"app\")))\n\n(defn init! []\n  (clerk/initialize!)\n  (accountant/configure-navigation!\n   {:nav-handler\n    (fn [path]\n      (let [match (reitit/match-by-path router path)\n            current-page (:name (:data  match))\n            route-params (:path-params match)]\n        (r/after-render clerk/after-render!)\n        (session/put! :route {:current-page (page-for current-page)\n                              :route-params route-params})\n        (clerk/navigate-page! path)\n        ))\n    :path-exists?\n    (fn [path]\n      (boolean (reitit/match-by-path router path)))})\n  (accountant/dispatch-current!)\n  (mount-root))\n\n(defn ^:dev/after-load reload! []\n  (mount-root))\n"]}