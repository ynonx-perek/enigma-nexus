{"version":3,"sources":["enigma_nexus/table/state.cljs"],"mappings":"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","names":["enigma-nexus.table.state/change-selection-at","data*","row-index","column-index","new-value","column-count","cljs.core.swap_BANG_","cljs.core/assoc-in","cljs.core.doall","iter__5520__auto__","s__61193","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__61195","cljs.core/chunk-buffer","i__61194","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__61192","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","c","cljs.core.range","on-cascade","or__5043__auto__","cljs.core/deref","cljs.core.get_in","cljs.core/identity","enigma-nexus.table.state/delete-nth","array","index","cljs.core/vec","cljs.core.concat","cljs.core.take","cljs.core.drop","enigma-nexus.table.state/delete-row!","data","cljs.core.assoc","enigma-nexus.table.state/set-row-indicators","indicator","row-cells","row-with-indicators","cljs.core.map","cell","p1__61218#","cljs.core.update","cljs.core.conj","enigma-nexus.table.state/clear-row-indicators","row","p1__61223#","cljs.core.disj","enigma-nexus.table.state/duplicate-row!","vec__61229","cljs.core.nth","rows","row-to-duplicate","copy-of-row-with-new-id","cljs.core/random-uuid","new-row","p1__61227#","l","r","cljs.core/split-at","enigma-nexus.table.state/new-row!","row-template","vec__61237","enigma-nexus.table.state/leaf-add-row-from-template","template-name","template","e","enigma-nexus.table.state/set-column-indicator","cljs.core.mapv","columns","cljs.core.update_in","indicators","enigma-nexus.table.state/clear-column-indicator","enigma-nexus.table.state/add-column-from-template","enigma-nexus.table.state/duplicate-column!","enigma-nexus.table.state/add-row-from-template","enigma-nexus.table.state/delete-column!","templates","cljs.core.into","p__61259","vec__61260","template-object","enigma-nexus.table.state/create-column-menu","enigma-nexus.tree.icons/kebab","enigma-nexus.tree.icons/plus","cljs.core.partial","enigma-nexus.tree.icons/duplicate","enigma-nexus.tree.icons/trash","enigma-nexus.table.state/create-row-menu","enigma-nexus.table.state/create-header-menu","enigma-nexus.table.state/__console_log","msg","js/console","cljs.core/clj->js","cljs.core/chunk-first"],"sourcesContent":["(ns enigma-nexus.table.state\r\n  (:require \r\n   [enigma-nexus.tree.icons :as icons] \r\n   [reagent.core :as r :refer [with-let]]))\r\n\r\n\r\n(defn change-selection-at [data* row-index column-index new-value column-count]\r\n  (swap! data* assoc-in [:data row-index :data column-index :data] new-value)\r\n  (doall (for [c (range (inc column-index) (dec column-count))]\r\n           (let [on-cascade (or (get-in @data* [:data row-index :data c :on-cascade]) identity)]\r\n             (on-cascade data* row-index column-index new-value row-index c)))))\r\n\r\n\r\n(defn delete-nth [array index]\r\n  (vec (concat (take index array) (drop (inc index) array))))\r\n\r\n(defn delete-row! [data* row-index]\r\n  (swap! data* (fn [data]\r\n                       (assoc data :data (delete-nth (:data data) row-index)))))\r\n\r\n(defn set-row-indicators [data* row-index indicator]\r\n  (swap! data* (fn [data]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t     (let [row-cells (get-in data [:data row-index :data])\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t           row-with-indicators (vec (map (fn [cell] (update cell :indicators #(conj (or % #{}) indicator))) row-cells))]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t       (assoc-in data [:data row-index :data] row-with-indicators)))))\r\n\r\n(defn clear-row-indicators [data* row-index indicator]\r\n  (swap! data* (fn [data]\r\n                       (let [row (get-in data [:data row-index :data])\r\n                             row-with-indicators (vec (map (fn [cell] (update cell :indicators #(disj (or % #{}) indicator))) row))]\r\n                         (assoc-in data [:data row-index :data] row-with-indicators)))))\r\n\r\n(defn duplicate-row! [data* row-index]\r\n  (swap! data* (fn [data]\r\n                  (let [rows (:data data)\r\n                        row-to-duplicate (get-in data [:data row-index])\r\n                        copy-of-row-with-new-id (assoc row-to-duplicate :id (str (random-uuid)))  ; change id\r\n                        new-row (assoc copy-of-row-with-new-id :data (vec (map #(-> %\r\n                                                                                       (assoc :indicators #{}) ; reset indicators in every column\r\n                                                                                       (assoc :id (str (random-uuid)))) ; new id for each new column\r\n                                                                                  (:data copy-of-row-with-new-id))))\r\n                        [l r] (split-at (inc row-index) rows)]\r\n                    (assoc data :data (vec (concat l [new-row] r)))))))\r\n\r\n(defn new-row! [data* row-index row-template]\r\n  (swap! data* (fn [data]\r\n                  (let [rows (:data data)\r\n                        [l r] (split-at (inc row-index) rows)]\r\n                    (assoc data :data (vec (concat l [row-template] r)))))))\r\n\r\n(defn leaf-add-row-from-template [data* row-index column-index template-name]\r\n  (let [template (get-in @data* [:row-templates template-name])]\r\n    (fn [e]\r\n      (. e stopPropagation)\r\n      (new-row! data* row-index (assoc template :id (str (random-uuid)))))))\r\n\r\n(defn set-column-indicator [data* column-index indicator]\r\n  (swap! data* (fn [data]\r\n                  (update data \r\n                  \t\t\t\t:data (fn [rows]\r\n                         (mapv (fn [row] \r\n                           (update row :data (fn [columns] \r\n                              (update-in columns [column-index :indicators] (fn [indicators]\r\n                                                                              (conj\r\n                                                                               (or indicators #{})\r\n                                                                               indicator)))))) rows))))))\r\n(defn clear-column-indicator [data* column-index indicator]\r\n  (swap! data* (fn [data]\r\n      (update data :data (fn [rows]\r\n         (vec (map (fn [row]\r\n             (update row :data (fn [columns]\r\n                 (update-in columns [column-index :indicators] (fn [indicators]\r\n                                                                 (disj\r\n                                                                  (or indicators #{})\r\n                                                                  indicator)))))) rows)))))))\r\n(defn add-column-from-template [data* row-index column-index template-name] true)\r\n(defn duplicate-column! [data* column-index] true)\r\n(defn add-row-from-template [data* row-index column-index template-name] true)\r\n;(defn duplicate-row! [data* column-index] true)\r\n\r\n(defn delete-column! [data* column-index]\r\n  (swap! data* (fn [data]\r\n                       (-> data\r\n                           (update :data\r\n                                   (fn [rows]\r\n                                     (mapv (fn [row]\r\n                                                 (update row :data\r\n                                                         (fn [columns]\r\n                                                           (delete-nth columns column-index)))) rows)))\r\n                           \r\n                           (update :row-templates\r\n                                   (fn [templates]\r\n                                     (into {} (map (fn [[template-name template-object]]\r\n                                                     [template-name (update template-object :data\r\n                                                                            (fn [columns]\r\n                                                                              (delete-nth columns column-index)))]) templates))))))))\r\n\r\n(defn create-column-menu [data* row-index column-index]\r\n  {:value [icons/kebab]\r\n   :class \"default-cell-menu\"\r\n   :expanded-class \"default-cell-menu-expanded\"\r\n   :tree-options {:separator-css \"menu-separator\"}\r\n   :type :click\r\n   :nodes [{:id (str (random-uuid))\r\n            :value [icons/plus]\r\n            :class \"menu-item-icon\"\r\n            :expanded-class \"menu-plus-expanded\"\r\n            :type :hover\r\n            :nodes [{:id (str (random-uuid))\r\n                     :class \"text-menu-item\"\r\n                     :value \"Container\"\r\n                     :events {:on-click (partial add-column-from-template data* row-index column-index \"Container\")}}\r\n                    {:id (str (random-uuid))\r\n                     :class \"text-menu-item\"\r\n                     :value \"Version\"\r\n                     :events {:on-click (partial add-column-from-template data* row-index column-index \"Version\")}}]}\r\n           {:id (str (random-uuid))\r\n            :value [icons/duplicate]\r\n            :class \"menu-item-icon\"\r\n            :events {:on-click (fn [e]\r\n                                 (. e stopPropagation)\r\n                                 (partial duplicate-column! data* column-index))}}\r\n           {:id (str (random-uuid))\r\n            :value [icons/trash]\r\n            :class \"menu-item-icon\"\r\n            :events {:on-mouse-enter (partial set-column-indicator data* column-index :column-danger)\r\n                     :on-mouse-leave (partial clear-column-indicator data* column-index :column-danger)\r\n                     :on-click (fn [e]\r\n                                 (. e stopPropagation)\r\n                                 (delete-column! data* column-index))}}]})\r\n\r\n(defn create-row-menu [data* row-index column-index]\r\n  {:value [icons/kebab]\r\n   :class \"default-cell-menu\"\r\n   :expanded-class \"default-cell-menu-expanded\"\r\n   :tree-options {:separator-css \"menu-separator\"}\r\n   :type :click\r\n   :nodes [{:id (str (random-uuid))\r\n            :value [icons/plus]\r\n            :class \"menu-item-icon\"\r\n            :expanded-class \"menu-plus-expanded\"\r\n            :type :hover\r\n            :nodes [{:id (str (random-uuid))\r\n                     :class \"text-menu-item\"\r\n                     :value \"Container\"\r\n                     :events {:on-click (partial add-row-from-template data* row-index column-index \"Drivers\")}}\r\n                    {:id (str (random-uuid))\r\n                     :class \"text-menu-item\"\r\n                     :value \"Version\"\r\n                     :events {:on-click (partial add-row-from-template data* row-index column-index \"Tools\")}}]}\r\n           {:id (str (random-uuid))\r\n            :value [icons/duplicate]\r\n            :class \"menu-item-icon\"\r\n            :events {:on-click (fn [e]\r\n                                 (. e stopPropagation)\r\n                                 (partial duplicate-column! data* column-index))}}\r\n           {:id (str (random-uuid))\r\n            :value [icons/trash]\r\n            :class \"menu-item-icon\"\r\n            :events {:on-mouse-enter (partial set-row-indicators data* row-index :danger)\r\n                     :on-mouse-leave (partial clear-row-indicators data* row-index :danger)\r\n                     :on-click (fn [e]\r\n                                 (. e stopPropagation)\r\n                                 (delete-row! data* row-index))}}]})\r\n\r\n\r\n(defn create-header-menu [data* row-index column-index]\r\n  {:id (str (random-uuid))\r\n   :value [icons/kebab]\r\n   :class \"default-cell-menu\"\r\n   :expanded-class \"default-cell-menu-expanded\"\r\n   :type :click\r\n   :nodes [{:id (str (random-uuid))\r\n            :value [icons/plus]\r\n            :class \"menu-item-icon\"\r\n            :expanded-class \"menu-plus-expanded\"\r\n            :type :hover\r\n            :nodes [{:id (str (random-uuid))\r\n                     :value \"Drivers\"\r\n                     :class \"text-menu-item\"\r\n                     :events {:on-click (leaf-add-row-from-template data* row-index column-index \"Drivers\")}}\r\n                    {:id (str (random-uuid))\r\n                     :value \"Images\"\r\n                     :class \"text-menu-item\"\r\n                     :events {:on-click (leaf-add-row-from-template data* row-index column-index \"Images\")}}]}]})\r\n\r\n\r\n\r\n\r\n(defn __console_log [msg]  (.log js/console (clj->js msg)))\r\n\r\n\r\n; Event -> Change Data Structure -> Read Data Structure\r\n\r\n\r\n\r\n;; ### easy\r\n;; 2. expand / collapse table\r\n;; 8. add columns, duplicate columns, delete columns (column menu)\r\n;; 9. responsive (multiple screen sizes)\r\n\r\n;; ### long\r\n;; 3. docs + tests\r\n;; 2. create popover + select + multi select\r\n;; 9. tabs in table (multi-table)\r\n\r\n;; ### with unknowns\r\n\r\n;; 4. drag & drop for rows\r\n;; 5. keyboard navigation\r\n;; 6. select cells and rows\r\n;; 7. copy / paste cells and rows\r\n\r\n\r\n"]}