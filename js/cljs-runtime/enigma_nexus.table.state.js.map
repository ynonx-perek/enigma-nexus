{"version":3,"sources":["enigma_nexus/table/state.cljs"],"mappings":";AASA,+CAAA,/CAAMA,sGAAqBC,iBAAYC,UAAUC,aAAaC,UAAUC;AAAxE,AACE,uFAAA,mFAAA,8DAAA,wEAAA,hTAACC,mDAAML,iBAAYM,0JAAgBL,qEAAmBC,8EAAuBC;;AAC7E,OAACI,8CAAM,iBAAAC,qBAAA,qEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAg8E0C,AAAA6F,sBAAAlG;IAh8E1CM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,QAAA,AAAAK,eAAAN,gBAAAK,nCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SACE,iBAAMc,aAAW,iBAAAC,mBAAI,+CAAA,AAAAC,kCAAA,mFAAA,8DAAA,6DAAA,/RAACC,+DAAQlC,yJAAmBC,qEAAmB4B;AAAnD,AAAA,oBAAAG;AAAAA;;AAAmEG;;;AAApF,AACE,QAACJ,2CAAAA,0GAAAA,jEAAW/B,sFAAAA,rEAAYC,sFAAAA,5EAAUC,sFAAAA,zEAAaC,sFAAAA,5EAAUF,sFAAAA,5EAAU4B,sFAAAA;;;AAFvE,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,2DAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAS,gBAAAjB,pBAAMoB;AAAN,AAAA,OAAAF,eACE,iBAAMI,aAAW,iBAAAC,mBAAI,+CAAA,AAAAC,kCAAA,mFAAA,8DAAA,6DAAA,/RAACC,+DAAQlC,yJAAmBC,qEAAmB4B;AAAnD,AAAA,oBAAAG;AAAAA;;AAAmEG;;;AAApF,AACE,QAACJ,2CAAAA,0GAAAA,jEAAW/B,sFAAAA,rEAAYC,sFAAAA,5EAAUC,sFAAAA,zEAAaC,sFAAAA,5EAAUF,sFAAAA,5EAAU4B,sFAAAA;KAFvE,AAAAL,2DAAA,AAAAI,eAAAnB;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAQ,AAACsB,8CAAM,gBAAA,fAAK5B,oBAAc,gBAAA,fAAKE;;;AAKhD,sCAAA,tCAAMgC,oFAAYC,MAAMC;AAAxB,AACE,OAACC,cAAI,AAACC,+CAAO,AAACC,6CAAKH,MAAMD,OAAO,AAACK,6CAAK,SAAA,RAAKJ,aAAOD;;AAEpD,4CAAA,5CAAMM,gGAAa3C,iBAAYC;AAA/B,AACE,OAACI,mDAAML,iBAAY,WAAK4C;AAAL,AACE,gEAAA,zDAACC,8CAAMD,+DAAiB,AAACR,oCAAW,AAAA,kFAAOQ,YAAY3C;;;AAE9E,8CAAA,9CAAM6C,oGAAoB9C,iBAAYC,UAAU8C;AAAhD,AACE,OAAC1C,mDAAML,iBAAY,WAAK4C;AAAL,AACE,IAAMI,YAAU,0DAAA,mFAAA,8DAAA,3MAACd,+CAAOU,kJAAkB3C;IACpCgD,sBAAoB,AAACV,cAAI,AAACW,4CAAI,WAAKC;AAAL,AAAW,2DAAA,iEAAA,WAAAC,hIAACC,+CAAOF;AAAR,AAA0B,OAACG,6CAAK,iBAAAtB,mBAAAoB;AAAA,AAAA,oBAAApB;AAAAA;;AAAA;;KAAWe;;GAAaC;AADvG,AAEE,qCAAA,mFAAA,8DAAA,/KAAC1C,mBAASsC,kJAAkB3C,6EAAoBgD;;;AAEzE,gDAAA,hDAAMM,wGAAsBvD,iBAAYC,UAAU8C;AAAlD,AACE,OAAC1C,mDAAML,iBAAY,WAAK4C;AAAL,AACE,IAAMY,MAAI,0DAAA,mFAAA,8DAAA,3MAACtB,+CAAOU,kJAAkB3C;IAC9BgD,sBAAoB,AAACV,cAAI,AAACW,4CAAI,WAAKO;AAAL,AAAQ,wDAAA,iEAAA,WAAAC,7HAACL,+CAAOI;AAAR,AAAuB,OAACE,6CAAK,iBAAA3B,mBAAA0B;AAAA,AAAA,oBAAA1B;AAAAA;;AAAA;;KAAWe;;GAAaS;AADjG,AAEE,qCAAA,mFAAA,8DAAA,/KAAClD,mBAASsC,kJAAkB3C,6EAAoBgD;;;AAEzE,+CAAA,/CAAMW,sGAAgBC,YAAO5D;AAA7B,AACE,OAACI,mDAAMwD,YAAO,WAAKC;AAAL,AACE,IAAMG,OAAK,AAAA,kFAAOH;IACZI,mBAAiB,qDAAA,mFAAA,xIAAChC,+CAAO4B,6IAAa7D;IACtCkE,0BAAwB,+DAAA,/DAACtB,8CAAMqB,mEAAqB,4CAAK,AAACE;IAC1DC,UAAQ,sEAAA,tEAACxB,8CAAMsB,mFAAiC,AAAC5B,cAAI,4CAAA,WAAA+B,vDAACpB;AAAD,qDACU,8CAAAoB,iBAAA,iEAAA,hIAACzB,rDACD,wNAAA,jNAACA,mQAAU,4CAAK,AAACuB;GACtB,AAAA,yFAAUD;IAN1EJ,aAOY,AAACU,mBAAS,aAAA,ZAAKxE,iBAAWgE;QAPtC,AAAAD,4CAAAD,WAAA,IAAA,/DAOOQ;QAPP,AAAAP,4CAAAD,WAAA,IAAA,/DAOSS;AAPT,AAQE,2DAAA,pDAAC3B,8CAAMiB,0DAAY,AAACvB,cAAI,wDAAA,xDAACC,sDAAO+B,qFAAGF,kEAASG;;;AAEhE,yCAAA,zCAAME,0FAAUb,YAAO5D,UAAU0E;AAAjC,AACE,OAACtE,mDAAMwD,YAAO,WAAKC;AAAL,AACE,IAAMG,OAAK,AAAA,kFAAOH;IAAlBc,aACY,AAACH,mBAAS,aAAA,ZAAKxE,iBAAWgE;QADtC,AAAAD,4CAAAY,WAAA,IAAA,/DACOL;QADP,AAAAP,4CAAAY,WAAA,IAAA,/DACSJ;AADT,AAEE,2DAAA,pDAAC3B,8CAAMiB,0DAAY,AAACvB,cAAI,wDAAA,xDAACC,sDAAO+B,qFAAGI,uEAAcH;;;AAErE,sDAAA,tDAAMK,oHAA4B7E,iBAAYC,UAAUC,aAAa4E;AAArE,AACE,IAAMC,WAAS,+CAAA,AAAA9C,kCAAA,mFAAA,pKAACC,+DAAQlC,4KAA4B8E;AAApD,AACE,kBAAKE;AAAL,AACE,AAAGA;;AACH,OAACN,uCAAS1E,iBAAYC,UAAU,uDAAA,vDAAC4C,8CAAMkC,2DAAa,4CAAK,AAACX;;;AAEhE,gDAAA,hDAAMa,wGAAsBjF,iBAAYE,aAAa6C;AAArD,AACE,OAAC1C,mDAAML,iBAAY,WAAK4C;AAAL,AACE,iEAAA,1DAACS,+CAAOT,+DAAiB,WAAKqB;AAAL,AACE,OAAC1B,cAAI,AAACW,4CAAI,WAAKM;AAAL,AACC,0DAAA,nDAACH,+CAAOG,+DAAa,WAAK0B;AAAL,AACE,iEAAA,gGAAA,1JAACC,kDAAUD,2FAAShF,sFAA0B,WAAKkF;AAAL,AACE,OAAC9B,6CACA,iBAAAtB,mBAAIoD;AAAJ,AAAA,oBAAApD;AAAAA;;AAAA;;KACAe;;;GAAgBkB;;;;AACrJ,kDAAA,lDAAMoB,4GAAwBrF,iBAAYE,aAAa6C;AAAvD,AACE,OAAC1C,mDAAML,iBAAY,WAAK4C;AAAL,AACE,iEAAA,1DAACS,+CAAOT,+DAAiB,WAAKqB;AAAL,AACE,OAAC1B,cAAI,AAACW,4CAAI,WAAKM;AAAL,AACE,0DAAA,nDAACH,+CAAOG,+DAAa,WAAK0B;AAAL,AACE,iEAAA,gGAAA,1JAACC,kDAAUD,2FAAShF,sFAA0B,WAAKkF;AAAL,AACE,OAACzB,6CACA,iBAAA3B,mBAAIoD;AAAJ,AAAA,oBAAApD;AAAAA;;AAAA;;KACAe;;;GAAgBkB;;;;AACtJ,oDAAA,pDAAMqB,gHAA0BtF,iBAAYC,UAAUC,aAAa4E;AAAnE,AAAA;;AACA,kDAAA,lDAAMS,4GAAmBvF,iBAAYE;AAArC,AAAA;;AACA,iDAAA,jDAAMsF,0GAAuBxF,iBAAYC,UAAUC,aAAa4E;AAAhE,AAAA;;AAGA,+CAAA,/CAAMW,sGAAgBzF,iBAAYE;AAAlC,AACE,OAACG,mDAAML,iBAAY,WAAK4C;AAAL,qGACMA,/CACA,0DAAA,1DAACS,8GACO,WAAKY,/KAMb,OAACZ;AANO,AACE,OAACd,cAAI,AAACW,4CAAI,WAAKM;AAAL,AACE,0DAAA,nDAACH,+CAAOG,+DACA,WAAK0B;AAAL,AACE,OAAC9C,oCAAW8C,QAAQhF;;GAAiB+D;IAErE,uEACQ,WAAKyB;AAAL,AACE,oDAAA,7CAACC,gFAAQ,AAACzC,4CAAI,WAAA0C;AAAA,AAAA,IAAAC,aAAAD;oBAAA,AAAA5B,4CAAA6B,WAAA,IAAA,3EAAMf;sBAAN,AAAAd,4CAAA6B,WAAA,IAAA,7EAAoBC;AAApB,AAAA,0FACGhB,cAAc,+DAAA,/DAACzB,+CAAOyC,2EACA,WAAKZ;AAAL,AACE,OAAC9C,oCAAW8C,QAAQhF;;GAAkBwF;;;;AAEpH,8CAAA,9CAAMK,oGAAoB/F,iBAAYC,UAAUC;AAAhD,AAAA,kDAAA,sDAAA,yHAAA,wDAAA,oBAAA,yEAAA,6BAAA,sEAAA,2CAAA,sEAAA,yBAAA,qDAAA,uDAAA,wDAAA,mFAAA,2CAAA,uHAAA,sDAAA,wHAAA,wDAAA,iBAAA,yEAAA,qBAAA,qDAAA,uDAAA,wDAAA,mFAAA,2CAAA,uHAAA,wDAAA,iBAAA,sDAAA,YAAA,yDAAA,2CAAA,kSAAA,2CAAA,uHAAA,wDAAA,iBAAA,sDAAA,UAAA,yDAAA,2CAAA,gTAAA,2CAAA,uHAAA,sDAAA,6HAAA,wDAAA,iBAAA,yDAAA,2CAAA,jwGACW8F,4vBAKK,4CAAK,AAAC5B,kKACF6B,giBAIK,4CAAK,AAAC7B,qUAGS,mMAAA,nMAAC8B,uDAAQZ,kDAAyBtF,iBAAYC,UAAUC,8LACvE,4CAAK,AAACkE,mUAGS,mMAAA,nMAAC8B,uDAAQZ,kDAAyBtF,iBAAYC,UAAUC,4MAChF,4CAAK,AAACkE,kKACF+B,oRAEW,WAAKnB;AAAL,AACE,AAAGA;;AACH,OAACkB,gDAAQX,gDAAkBvF,iBAAYE;mBAxBxE,2CAAA,uHAAA,sDAAA,yHAAA,wDAAA,iBAAA,yDAAA,2CAAA,4QAAA,8QAAA,37BAyBgB,4CAAK,AAACkE,kKACFgC,6RAEiB,4HAAA,5HAACF,gDAAQjB,8CAAqBjF,iBAAYE,6JAC1C,8HAAA,9HAACgG,gDAAQb,gDAAuBrF,iBAAYE,gJAClD,WAAK8E;AAAL,AACE,AAAGA;;AACH,OAACS,6CAAezF,iBAAYE;;;AAE7D,2CAAA,3CAAMmG,8FAAiBrG,iBAAYC,UAAUC;AAA7C,AAAA,kDAAA,sDAAA,yHAAA,wDAAA,oBAAA,yEAAA,6BAAA,sEAAA,2CAAA,sEAAA,yBAAA,qDAAA,uDAAA,wDAAA,mFAAA,2CAAA,uHAAA,sDAAA,wHAAA,wDAAA,iBAAA,yEAAA,qBAAA,qDAAA,uDAAA,wDAAA,mFAAA,2CAAA,uHAAA,wDAAA,iBAAA,sDAAA,YAAA,yDAAA,2CAAA,6RAAA,2CAAA,uHAAA,wDAAA,iBAAA,sDAAA,UAAA,yDAAA,2CAAA,2SAAA,2CAAA,uHAAA,sDAAA,6HAAA,wDAAA,iBAAA,yDAAA,2CAAA,vvGACW8F,4vBAKK,4CAAK,AAAC5B,kKACF6B,giBAIK,4CAAK,AAAC7B,qUAGS,gMAAA,hMAAC8B,uDAAQV,+CAAsBxF,iBAAYC,UAAUC,4LACpE,4CAAK,AAACkE,mUAGS,gMAAA,hMAAC8B,uDAAQV,+CAAsBxF,iBAAYC,UAAUC,0MAC7E,4CAAK,AAACkE,kKACF+B,oRAEW,WAAKnB;AAAL,AACE,AAAGA;;AACH,OAACkB,gDAAQX,gDAAkBvF,iBAAYE;mBAxBxE,2CAAA,uHAAA,sDAAA,yHAAA,wDAAA,iBAAA,yDAAA,2CAAA,2PAAA,6PAAA,z5BAyBgB,4CAAK,AAACkE,kKACFgC,6RAEiB,uHAAA,vHAACF,gDAAQpD,4CAAmB9C,iBAAYC,8IACxC,yHAAA,zHAACiG,gDAAQ3C,8CAAqBvD,iBAAYC,iIAChD,WAAK+E;AAAL,AACE,AAAGA;;AACH,OAACrC,0CAAY3C,iBAAYC;;;AAG1D,8CAAA,9CAAMqG,oGAAoBtG,iBAAYC,UAAUC;AAAhD,AAAA,kDAAA,uHAAA,sDAAA,yHAAA,wDAAA,oBAAA,yEAAA,6BAAA,qDAAA,uDAAA,wDAAA,mFAAA,2CAAA,uHAAA,sDAAA,wHAAA,wDAAA,iBAAA,yEAAA,qBAAA,qDAAA,uDAAA,wDAAA,mFAAA,2CAAA,uHAAA,sDAAA,UAAA,wDAAA,iBAAA,yDAAA,2CAAA,oLAAA,2CAAA,uHAAA,sDAAA,SAAA,wDAAA,iBAAA,yDAAA,2CAAA,51EACO,4CAAK,AAACkE,kKACF4B,4iBAIK,4CAAK,AAAC5B,kKACF6B,giBAIK,4CAAK,AAAC7B,mUAGS,4FAAA,5FAACS,oDAA2B7E,iBAAYC,UAAUC,qIACjE,4CAAK,AAACkE,kUAGS,4FAAA,5FAACS,oDAA2B7E,iBAAYC,UAAUC;;AAK1F,yCAAA,zCAAMqG,0FAAeC;AAArB,AAA2B,OAAMC,YAAW,AAACC,qBAAQF","names":["enigma-nexus.table.state/change-selection-at","table-data*","row-index","column-index","new-value","column-count","cljs.core.swap_BANG_","cljs.core/assoc-in","cljs.core.doall","iter__5520__auto__","s__68217","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__68219","cljs.core/chunk-buffer","i__68218","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__68216","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","c","cljs.core.range","on-cascade","or__5043__auto__","cljs.core/deref","cljs.core.get_in","cljs.core/identity","enigma-nexus.table.state/delete-nth","array","index","cljs.core/vec","cljs.core.concat","cljs.core.take","cljs.core.drop","enigma-nexus.table.state/delete-row!","table-data","cljs.core.assoc","enigma-nexus.table.state/set-row-indicators","indicator","row-cells","row-with-indicators","cljs.core.map","cell","p1__68225#","cljs.core.update","cljs.core.conj","enigma-nexus.table.state/clear-row-indicators","row","m","p1__68226#","cljs.core.disj","enigma-nexus.table.state/duplicate-row!","table*","state","vec__68233","cljs.core.nth","rows","row-to-duplicate","copy-of-row-with-new-id","cljs.core/random-uuid","new-row","p1__68232#","l","r","cljs.core/split-at","enigma-nexus.table.state/new-row!","row-template","vec__68236","enigma-nexus.table.state/leaf-add-row-from-template","template-name","template","e","enigma-nexus.table.state/set-column-indicator","columns","cljs.core.update_in","indicators","enigma-nexus.table.state/clear-column-indicator","enigma-nexus.table.state/add-column-from-template","enigma-nexus.table.state/duplicate-column!","enigma-nexus.table.state/add-row-from-template","enigma-nexus.table.state/delete-column!","templates","cljs.core.into","p__68239","vec__68240","template-object","enigma-nexus.table.state/create-column-menu","enigma-nexus.tree.icons/kebab","enigma-nexus.tree.icons/plus","cljs.core.partial","enigma-nexus.tree.icons/duplicate","enigma-nexus.tree.icons/trash","enigma-nexus.table.state/create-row-menu","enigma-nexus.table.state/create-header-menu","enigma-nexus.table.state/__console_log","msg","js/console","cljs.core/clj->js","cljs.core/chunk-first"],"sourcesContent":["(ns enigma-nexus.table.state\r\n  (:require \r\n   [enigma-nexus.tree.icons :as icons] \r\n   [enigma-nexus.tree.style :refer [button-menu-column text-menu-column kebab-style]] \r\n   [enigma-nexus.tree.tree :as tree]\r\n   [enigma-nexus.tree.icons :as icons]\r\n   [reagent.core :as r :refer [with-let]]))\r\n\r\n\r\n(defn change-selection-at [table-data* row-index column-index new-value column-count]\r\n  (swap! table-data* assoc-in [:rows row-index :columns column-index :content] new-value)\r\n  (doall (for [c (range (inc column-index) (dec column-count))]\r\n           (let [on-cascade (or (get-in @table-data* [:rows row-index :columns c :on-cascade]) identity)]\r\n             (on-cascade table-data* row-index column-index new-value row-index c)))))\r\n\r\n\r\n(defn delete-nth [array index]\r\n  (vec (concat (take index array) (drop (inc index) array))))\r\n\r\n(defn delete-row! [table-data* row-index]\r\n  (swap! table-data* (fn [table-data]\r\n                       (assoc table-data :rows (delete-nth (:rows table-data) row-index)))))\r\n\r\n(defn set-row-indicators [table-data* row-index indicator]\r\n  (swap! table-data* (fn [table-data]\r\n                       (let [row-cells (get-in table-data [:rows row-index :columns])\r\n                             row-with-indicators (vec (map (fn [cell] (update cell :indicators #(conj (or % #{}) indicator))) row-cells))]\r\n                         (assoc-in table-data [:rows row-index :columns] row-with-indicators)))))\r\n\r\n(defn clear-row-indicators [table-data* row-index indicator]\r\n  (swap! table-data* (fn [table-data]\r\n                       (let [row (get-in table-data [:rows row-index :columns])\r\n                             row-with-indicators (vec (map (fn [m] (update m :indicators #(disj (or % #{}) indicator))) row))]\r\n                         (assoc-in table-data [:rows row-index :columns] row-with-indicators)))))\r\n\r\n(defn duplicate-row! [table* row-index]\r\n  (swap! table* (fn [state]\r\n                  (let [rows (:rows state)\r\n                        row-to-duplicate (get-in state [:rows row-index])\r\n                        copy-of-row-with-new-id (assoc row-to-duplicate :id (str (random-uuid)))  ; change id\r\n                        new-row (assoc copy-of-row-with-new-id :columns (vec (map #(-> %\r\n                                                                                       (assoc :indicators #{}) ; reset indicators in every column\r\n                                                                                       (assoc :id (str (random-uuid)))) ; new id for each new column\r\n                                                                                  (:columns copy-of-row-with-new-id))))\r\n                        [l r] (split-at (inc row-index) rows)]\r\n                    (assoc state :rows (vec (concat l [new-row] r)))))))\r\n\r\n(defn new-row! [table* row-index row-template]\r\n  (swap! table* (fn [state]\r\n                  (let [rows (:rows state)\r\n                        [l r] (split-at (inc row-index) rows)]\r\n                    (assoc state :rows (vec (concat l [row-template] r)))))))\r\n\r\n(defn leaf-add-row-from-template [table-data* row-index column-index template-name]\r\n  (let [template (get-in @table-data* [:row-templates template-name])]\r\n    (fn [e]\r\n      (. e stopPropagation)\r\n      (new-row! table-data* row-index (assoc template :id (str (random-uuid)))))))\r\n\r\n(defn set-column-indicator [table-data* column-index indicator]\r\n  (swap! table-data* (fn [table-data]\r\n                       (update table-data :rows (fn [rows]\r\n                                                  (vec (map (fn [row] \r\n                                                             (update row :columns (fn [columns] \r\n                                                                                    (update-in columns [column-index :indicators] (fn [indicators]\r\n                                                                                                                                    (conj\r\n                                                                                                                                     (or indicators #{})\r\n                                                                                                                                     indicator)))))) rows)))))))\r\n(defn clear-column-indicator [table-data* column-index indicator]\r\n  (swap! table-data* (fn [table-data]\r\n                       (update table-data :rows (fn [rows]\r\n                                                  (vec (map (fn [row]\r\n                                                              (update row :columns (fn [columns]\r\n                                                                                     (update-in columns [column-index :indicators] (fn [indicators]\r\n                                                                                                                                     (disj\r\n                                                                                                                                      (or indicators #{})\r\n                                                                                                                                      indicator)))))) rows)))))))\r\n(defn add-column-from-template [table-data* row-index column-index template-name] true)\r\n(defn duplicate-column! [table-data* column-index] true)\r\n(defn add-row-from-template [table-data* row-index column-index template-name] true)\r\n;(defn duplicate-row! [table-data* column-index] true)\r\n\r\n(defn delete-column! [table-data* column-index]\r\n  (swap! table-data* (fn [table-data]\r\n                       (-> table-data\r\n                           (update :rows\r\n                                   (fn [rows]\r\n                                     (vec (map (fn [row]\r\n                                                 (update row :columns\r\n                                                         (fn [columns]\r\n                                                           (delete-nth columns column-index)))) rows))))\r\n                           \r\n                           (update :row-templates\r\n                                   (fn [templates]\r\n                                     (into {} (map (fn [[template-name template-object]]\r\n                                                     [template-name (update template-object :columns\r\n                                                                            (fn [columns]\r\n                                                                              (delete-nth columns column-index)))]) templates))))))))\r\n\r\n(defn create-column-menu [table-data* row-index column-index]\r\n  {:value [icons/kebab]\r\n   :class \"default-cell-menu\"\r\n   :expanded-class \"default-cell-menu-expanded\"\r\n   :tree-options {:separator-css \"menu-separator\"}\r\n   :type :click\r\n   :nodes [{:id (str (random-uuid))\r\n            :value [icons/plus]\r\n            :class \"menu-item-icon\"\r\n            :expanded-class \"menu-plus-expanded\"\r\n            :type :hover\r\n            :nodes [{:id (str (random-uuid))\r\n                     :class \"text-menu-item\"\r\n                     :value \"Container\"\r\n                     :events {:on-click (partial add-column-from-template table-data* row-index column-index \"Container\")}}\r\n                    {:id (str (random-uuid))\r\n                     :class \"text-menu-item\"\r\n                     :value \"Version\"\r\n                     :events {:on-click (partial add-column-from-template table-data* row-index column-index \"Version\")}}]}\r\n           {:id (str (random-uuid))\r\n            :value [icons/duplicate]\r\n            :class \"menu-item-icon\"\r\n            :events {:on-click (fn [e]\r\n                                 (. e stopPropagation)\r\n                                 (partial duplicate-column! table-data* column-index))}}\r\n           {:id (str (random-uuid))\r\n            :value [icons/trash]\r\n            :class \"menu-item-icon\"\r\n            :events {:on-mouse-enter (partial set-column-indicator table-data* column-index :column-danger)\r\n                     :on-mouse-leave (partial clear-column-indicator table-data* column-index :column-danger)\r\n                     :on-click (fn [e]\r\n                                 (. e stopPropagation)\r\n                                 (delete-column! table-data* column-index))}}]})\r\n\r\n(defn create-row-menu [table-data* row-index column-index]\r\n  {:value [icons/kebab]\r\n   :class \"default-cell-menu\"\r\n   :expanded-class \"default-cell-menu-expanded\"\r\n   :tree-options {:separator-css \"menu-separator\"}\r\n   :type :click\r\n   :nodes [{:id (str (random-uuid))\r\n            :value [icons/plus]\r\n            :class \"menu-item-icon\"\r\n            :expanded-class \"menu-plus-expanded\"\r\n            :type :hover\r\n            :nodes [{:id (str (random-uuid))\r\n                     :class \"text-menu-item\"\r\n                     :value \"Container\"\r\n                     :events {:on-click (partial add-row-from-template table-data* row-index column-index \"Drivers\")}}\r\n                    {:id (str (random-uuid))\r\n                     :class \"text-menu-item\"\r\n                     :value \"Version\"\r\n                     :events {:on-click (partial add-row-from-template table-data* row-index column-index \"Tools\")}}]}\r\n           {:id (str (random-uuid))\r\n            :value [icons/duplicate]\r\n            :class \"menu-item-icon\"\r\n            :events {:on-click (fn [e]\r\n                                 (. e stopPropagation)\r\n                                 (partial duplicate-column! table-data* column-index))}}\r\n           {:id (str (random-uuid))\r\n            :value [icons/trash]\r\n            :class \"menu-item-icon\"\r\n            :events {:on-mouse-enter (partial set-row-indicators table-data* row-index :danger)\r\n                     :on-mouse-leave (partial clear-row-indicators table-data* row-index :danger)\r\n                     :on-click (fn [e]\r\n                                 (. e stopPropagation)\r\n                                 (delete-row! table-data* row-index))}}]})\r\n\r\n\r\n(defn create-header-menu [table-data* row-index column-index]\r\n  {:id (str (random-uuid))\r\n   :value [icons/kebab]\r\n   :class \"default-cell-menu\"\r\n   :expanded-class \"default-cell-menu-expanded\"\r\n   :type :click\r\n   :nodes [{:id (str (random-uuid))\r\n            :value [icons/plus]\r\n            :class \"menu-item-icon\"\r\n            :expanded-class \"menu-plus-expanded\"\r\n            :type :hover\r\n            :nodes [{:id (str (random-uuid))\r\n                     :value \"Drivers\"\r\n                     :class \"text-menu-item\"\r\n                     :events {:on-click (leaf-add-row-from-template table-data* row-index column-index \"Drivers\")}}\r\n                    {:id (str (random-uuid))\r\n                     :value \"Images\"\r\n                     :class \"text-menu-item\"\r\n                     :events {:on-click (leaf-add-row-from-template table-data* row-index column-index \"Images\")}}]}]})\r\n\r\n\r\n\r\n\r\n(defn __console_log [msg]  (.log js/console (clj->js msg)))\r\n\r\n\r\n; Event -> Change Data Structure -> Read Data Structure\r\n\r\n\r\n\r\n;; ### easy\r\n;; 2. expand / collapse table\r\n;; 8. add columns, duplicate columns, delete columns (column menu)\r\n;; 9. responsive (multiple screen sizes)\r\n\r\n;; ### long\r\n;; 3. docs + tests\r\n;; 2. create popover + select + multi select\r\n;; 9. tabs in table (multi-table)\r\n\r\n;; ### with unknowns\r\n\r\n;; 4. drag & drop for rows\r\n;; 5. keyboard navigation\r\n;; 6. select cells and rows\r\n;; 7. copy / paste cells and rows\r\n\r\n\r\n"]}