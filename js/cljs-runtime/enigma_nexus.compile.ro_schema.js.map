{"version":3,"sources":["enigma_nexus/compile/ro_schema.cljs"],"mappings":"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","names":["enigma-nexus.compile.ro-schema/decompile-from-tree","tree","cljs.core/vector?","cljs.core.mapv","item","cljs.core/map?","cljs.core.apply","cljs.core/merge","cljs.core.map","p__62935","vec__62936","cljs.core.nth","key","value","cljs.core/coll?","enigma-nexus.compile.ro-schema/compile-to-tree","data","cljs.core/random-uuid","cljs.core/Keyword","enigma-nexus.tree.ro.skins/cell-text-input","enigma-nexus.tree.ro.skins/expand-collapse","cljs.core/vec","cljs.core.map_indexed","index","p__62941","vec__62942","enigma-nexus.compile.ro-schema/compile-to-tree-table","cljs.core/count","enigma-nexus.tree.ro.skins/table-in-tree","enigma-nexus.compile.rw-schema/compile-to-table","p__62945","vec__62946"],"sourcesContent":["(ns enigma-nexus.compile.ro-schema\r\n  (:require\r\n   [reagent.core :as r :refer [with-let]]\r\n   [enigma-nexus.compile.rw-schema :refer [compile-to-table]]\r\n   [enigma-nexus.table.skins :as table-skin]\r\n   [enigma-nexus.tree.ro.skins :as tree-skin]\r\n   [enigma-nexus.table.table :refer [table]]\r\n   [enigma-nexus.tree.icons :as icons]))\r\n\r\n(declare compile-to-tree)\r\n(declare compile-to-tree-table)\r\n\r\n(defn decompile-from-tree [tree]\r\n  (cond\r\n    (vector? (:tree tree)) (mapv (fn [item] (decompile-from-tree item)) (:tree tree))\r\n    (map? (:tree tree)) (apply merge (map (fn [[key value]] {(decompile-from-tree key) (decompile-from-tree value)}) (:tree tree)))\r\n    (not (coll? (:tree tree))) (:tree tree)))\r\n\r\n\r\n(defn compile-to-tree [data]\r\n  (cond\r\n    (not (coll? data)) {:id (str (random-uuid))\r\n                        :indicators #{:expanded}\r\n                        :type :scalar\r\n                        :tree (if (keyword? data) (str data) data)\r\n                        :component [tree-skin/cell-text-input]}\r\n\r\n    (vector? data) {:id (str (random-uuid))\r\n                    :type :vector\r\n                    :indicators #{:expanded}\r\n                    :component [tree-skin/expand-collapse]\r\n                    :tree (vec (map-indexed (fn [index item] (compile-to-tree item)) data))}\r\n\r\n    (map? data) {:id (str (random-uuid))\r\n                 :indicators #{:expanded}\r\n                 :type :map\r\n                 :component [tree-skin/expand-collapse]\r\n                 :tree (apply merge (map (fn [[key item]] {{:indicators #{:expanded}\r\n                                                            :type :map-key\r\n                                                            :tree (if (keyword? key) (str key) key)\r\n                                                            :id (str (random-uuid))\r\n                                                            :component [tree-skin/cell-text-input tree-skin/expand-collapse]}\r\n                                                           (compile-to-tree item)}) data))}))\r\n\r\n\r\n(defn compile-to-tree-table [data]\r\n  (cond\r\n    (not (coll? data)) {:id (str (random-uuid))\r\n                        :indicators #{:expanded}\r\n                        :type :scalar\r\n                        :tree (if (keyword? data) (str data) data)\r\n                        :component [tree-skin/cell-text-input]}\r\n\r\n    (and (vector? data) (< (count data) 2)) {:id (str (random-uuid))\r\n                                             :type :vector\r\n                                             :indicators #{:expanded}\r\n                                             :component [tree-skin/expand-collapse]\r\n                                             :tree (vec (map-indexed (fn [index item] (compile-to-tree-table item)) data))}\r\n\r\n    (vector? data) {:id (str (random-uuid))\r\n                    :type :vector\r\n                    :component-hint \"table-in-tree\"\r\n                    :indicators #{:expanded :q}\r\n                    :component [tree-skin/table-in-tree]\r\n                    :tree (compile-to-table data)}\r\n\r\n    (map? data) {:id (str (random-uuid))\r\n                 :indicators #{:expanded}\r\n                 :type :map\r\n                 :component [tree-skin/expand-collapse]\r\n                 :tree (apply merge (map (fn [[key item]] {{:indicators #{:expanded}\r\n                                                            :type :map-key\r\n                                                            :tree (if (keyword? key) (str key) key)\r\n                                                            :id (str (random-uuid))\r\n                                                            :component [tree-skin/cell-text-input tree-skin/expand-collapse]}\r\n                                                           (compile-to-tree-table item)}) data))}))\r\n"]}