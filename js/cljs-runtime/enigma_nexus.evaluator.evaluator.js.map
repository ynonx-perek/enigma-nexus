{"version":3,"sources":["enigma_nexus/evaluator/evaluator.cljs"],"mappings":";AAIA,sDAAA,tDAAMA,oHAAoBC;AAA1B,AACE,IAAMC,eAAa,AAAUD;IACvBE,YAAU,KAAAC,SAAcF;IACxBG,OAAK,cAAA,dAAIF;AAFf,AAGEE;;AAEJ,8CAAA,9CAAMC,oGAAYD;AAAlB,AACE,IAAME,eAAa,AAACC,mBAAsBH;IACpCI,MAAI,CAAA,0DAAmBF;AAD7B,OAGM,AAACG,MAASD,NACV,gBAAO,WAAKE,lCAEZ;AAFO,AACE,OAAOA;SACTC;;AAEf,6CAAA,7CAAMC,kGAAWC;AAAjB,AACE,IAAAC,gBAAA,AAAAC,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAF,6BAAA,AAAAI;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAR,2BAAA,AAAAI;;;AAAA,IAAAK,YAAA,CAAA,AAAAT,yBAAA;wBAAA,EAAA,EAAAS,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,8DAAA,CAAAA,cAAA,vLAAaY,iHAAa,gDAAA,hDAACC;kBAA3B,EAAA,EAAAJ,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,pGACac,2GAAY,WAAK5B;AAAL,AACE,IAAMI,OAAK,AAACL,oDAAmBC;AAA/B,AACE,AAAGA;;AACH,OAAO,AAACK,4CAAWD,WACZ,WAAKyB;AAAL,AACE,OAACC,sBAAOJ,kBAAa,mDAAA,nDAACK,4CAAIF;;IANhE,CAAAf,cAAA;IAAAW,WAAA,AAAA,mFAAA,sDAAA,2CAAA,mFAAA,mFAAA,uDAAA,OAAA,mFAAA,6DAAA,2CAAA,qDAAA,+BAAA,mFAAA,yDAAA,eAAA,mFAAA,uDAAA,kBAAA,mFAAA,9zBAOqBG,i3BAMZ,4CAAA,AAAAI,gBAAMN;AAbf,AAAAD","names":["enigma-nexus.evaluator.evaluator/get-code-from-form","ev","form-element","form-data","js/FormData","code","enigma-nexus.evaluator.evaluator/fetch-eval","encoded-code","js/encodeURIComponent","url","js/fetch","response","cljs.core/js->clj","enigma-nexus.evaluator.evaluator/evaluator","props","with-let69998","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__67734__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init69999","cljs.core/not","res70000","last-result*","reagent.core.atom","handle-eval","result","cljs.core/reset!","cljs.core.get","cljs.core/deref"],"sourcesContent":["(ns enigma-nexus.evaluator.evaluator\r\n  (:require\r\n   [reagent.core :as r :refer [with-let]]))\r\n\r\n(defn get-code-from-form [ev]\r\n  (let [form-element (.-target ev)\r\n        form-data (js/FormData. form-element)\r\n        code (.. form-data (get \"code\"))]\r\n    code))\r\n\r\n(defn fetch-eval [code]\r\n  (let [encoded-code (js/encodeURIComponent code)\r\n        url (str \"/eval?code=\" encoded-code)]\r\n    \r\n    (-> (js/fetch url)\r\n        (.then (fn [response]\r\n                 (.json response)))\r\n        (.then js->clj))))\r\n\r\n(defn evaluator [props]\r\n  (r/with-let [last-result* (r/atom nil)\r\n               handle-eval (fn [ev]\r\n                             (let [code (get-code-from-form ev)]\r\n                               (. ev preventDefault)\r\n                               (.then (fetch-eval code) \r\n                                      (fn [result]\r\n                                        (reset! last-result* (get result \"result\"))))))]\r\n    [:form {:on-submit handle-eval}\r\n     [:label \"Code\"\r\n      [:textarea {:name \"code\"}]]\r\n     [:button\r\n      \"Eval\"]\r\n     [:label \"Result:\"]\r\n     [:div (str @last-result*)]]))\r\n"]}