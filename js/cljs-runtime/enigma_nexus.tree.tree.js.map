{"version":3,"sources":["enigma_nexus/tree/tree.cljs"],"mappings":"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","names":["enigma-nexus.tree.tree/tree-widget-rw","props","map__59139","cljs.core/--destructure-map","cljs.core.get","tree*","index","with-let59140","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__59044__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init59141","cljs.core/not","res59142","indicators*","reagent.core/cursor","map__59143","cljs.core/deref","id","class","value","component","indicators","cljs.core/contains?","cljs.core/vec","cljs.core.concat","cljs.core.doall","cljs.core.map_indexed","c-index","c","child-node","enigma-nexus.tree.tree/tree-widget-ro","map__59144","with-let59145","init59146","res59147","inner-tree*","map__59148","tree","and__5041__auto__","cljs.core/coll?","vec__59149","cljs.core.nth","o-br","c-br","get-key","cljs.core/vector?","item","cljs.core/map?","vec__59152","key","val","vec__59155","_index","vec__59158","r-index","enigma-nexus.tree.tree/node","with-let59161","init59162","res59163","expanded*","reagent.core.atom","map__59164","tree-options","nodes","type","style","expanded-style","expanded-class","cljs.core.merge","G__59165","cljs.core/Keyword","e","cljs.core.swap_BANG_","cljs.core/reset!","child-count","cljs.core/count","child","cljs.core.not_EQ_"],"sourcesContent":["(ns enigma-nexus.tree.tree\r\n  (:require\r\n   [reagent.core :as r :refer [with-let]]))\r\n\r\n(defn tree-widget-rw [props]\r\n  (let [{:keys [tree* index]} props]\r\n    (r/with-let [indicators* (r/cursor tree* [:indicators])]\r\n      (let [{:keys [id class value component indicators]} @tree*]\r\n        [:div {:key id :class (str \"tree-node \" class)}\r\n         (if (not (contains? #{:vector :map} (:type @tree*)))\r\n           [:div {:class \"inner-tree-value\"}\r\n            (vec (concat\r\n                  [:<> (doall (map-indexed (fn [c-index c]\r\n                                             [c {:key c-index\r\n                                                 :tree* tree*\r\n                                                 :value value\r\n                                                 :indicators* indicators*}]) component))]))])\r\n\r\n         (if (:expanded @indicators*)\r\n           [:div {:class \"inner-tree-children\"}\r\n            (vec (concat\r\n                  [:<> (doall (map-indexed (fn [index child-node]\r\n                                             [tree-widget-rw {:class (str \"child-\" index)\r\n                                                           :index index\r\n                                                           :key index\r\n                                                           :tree* (r/cursor tree* [:tree index])}]) (:tree @tree*)))]))])]))))\r\n\r\n\r\n(defn tree-widget-ro [props]\r\n  (let [{:keys [tree* index]} props]\r\n    (r/with-let [inner-tree* (r/cursor tree* (if index index []))\r\n                 indicators* (r/cursor inner-tree* [:indicators])]\r\n      (let [{:keys [id class tree component]} @inner-tree*]\r\n        [:div {:class (str \"tree-node \" class :key (str  id \"_0\"))}\r\n         [:div {:class \"inner-tree-value\" :key (str id \"_1\")}\r\n          (doall (map-indexed (fn [c-index c]\r\n                                [c {:tree* inner-tree*\r\n                                    :value tree\r\n                                    :indicators* indicators*\r\n                                    :key (str \"skin_componet_\"  id \"_\" (+ c-index 3))}]) component))\r\n\r\n          (if (and (:expanded @indicators*) (coll? tree))\r\n            (let [[o-br c-br get-key] (cond\r\n                                        (vector? tree) [\"[\" \"]\" (fn [index item]  [[:tree index] index])]\r\n                                        (map? tree) [\"{\" \"}\" (fn [index item] (let [[key val] item]\r\n                                                                                (let [[_index key]\r\n                                                                                      [[:tree key] (:tree key)]] [_index key])))])]\r\n              [:div {:class \"inner-tree-children\" :key (str \"coll_\" id \"_2\")}\t\to-br\r\n               (doall (map-indexed (fn [index item]\r\n                                     (let [[r-index key] (get-key index item)]\r\n                                       [:<> {:key (str index \"-\" id)}\r\n                                        [:div {:key (str index \"+\" id)} key]\r\n\r\n                                        [tree-widget-ro {:class (str \"child-\" index)\r\n                                                         :index r-index\r\n                                                         :key (str index \"_child_\" id)\r\n                                                         :tree* inner-tree*}]]))\r\n                                   (:tree @inner-tree*))) c-br]))]]))))\r\n\r\n;; Used by the table's menu\r\n(defn node [props]\r\n  (r/with-let [expanded* (r/atom false)]\r\n    (let [{:keys [tree-options value nodes type style expanded-style class expanded-class]} props]\r\n      [:div (merge\r\n             {:class class}\r\n             {:style style}\r\n             (case type\r\n               :click {:on-click (fn [e]\r\n                                   (. e stopPropagation)\r\n                                   (swap! expanded* not))}\r\n               :hover {:on-mouse-enter #(reset! expanded* true)\r\n                       :on-mouse-leave #(reset! expanded* false)}\r\n               (:events props)))\r\n\r\n       value\r\n       (if @expanded*\r\n         (let [child-count (count nodes)]\r\n           [:div {:style expanded-style\r\n                  :class expanded-class}\r\n            (map-indexed (fn [index child]\r\n                           [:<> {:key (:id child)}\r\n                            [node (merge {:tree-options tree-options} child)]\r\n                            (if (not= index (dec child-count))\r\n                              [:div {:class (:separator-css tree-options)}])])\r\n                         nodes)]))])))"]}