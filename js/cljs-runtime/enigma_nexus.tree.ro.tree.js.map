{"version":3,"sources":["enigma_nexus/tree/ro/tree.cljs"],"mappings":";AAIA,wCAAA,xCAAMA,wFAAaC;AAAnB,AACE,IAAAC,aAA4BD;IAA5BC,iBAAA,AAAAC,4BAAAD;iBAAA,AAAAE,4CAAAF,eAAA,xEAAcG;YAAd,AAAAD,4CAAAF,eAAA,nEAAoBI;AAApB,AACE,IAAAC,gBAAA,AAAAC,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAF,6BAAA,AAAAI;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAR,2BAAA,AAAAI;;;AAAA,IAAAK,YAAA,CAAA,AAAAT,yBAAA;uBAAA,EAAA,EAAAS,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,yGAAA,CAAAA,cAAA,jOAAaY,gHAAY,AAACC,oBAASf,WAAM,+BAAA,bAAIC,OAAMA;uBAAnD,EAAA,EAAAU,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,0MAAA,CAAAA,cAAA,lUACac,gHAAY,qCAAA,mFAAA,xHAACD,oBAASD;IADnCD,WAAA,AAEE,iBAAAI,aAAA,AAAAC,gBAAyCJ;IAAzCG,iBAAA,AAAAnB,4BAAAmB;SAAA,AAAAlB,4CAAAkB,eAAA,hEAAcE;aAAd,AAAApB,4CAAAkB,eAAA,pEAAiBG;WAAjB,AAAArB,4CAAAkB,eAAA,lEAAuBI;gBAAvB,AAAAtB,4CAAAkB,eAAA,vEAA4BK;AAA5B,AAAA,0FAAA,mDAAA,2CAAA,6SAAA,mFAAA,mDAAA,2CAAA,wDAAA,mBAAA,jfACgB,CAAA,6GAAA,pDAAkBF,yGAAW,iDAAA,JAAMD,qVACV,iDAAA,JAAKA,2BAC1C,AAACI,8CAAM,AAACC,oDAAY,WAAKC,QAAQC;AAAb,AAAA,4FAAA,2CAAA,wEAAA,2DAAA,qFAAA,rQACGA,oGAAUZ,uEACAO,yEACML,qEACR,CAAA,iEAAA,JAAuBG,oDAAO,WAAA,VAAGM;GAAeH,YAE/E,kBAAI,iBAAAK,oBAAK,AAAA,yFAAA,AAAAT,gBAAYF;AAAjB,AAAA,oBAAAW;AAA8B,OAACC,sBAAMP;;AAArCM;;MACF,iBAAAE,aAA0B,iCAAA,mFAAA,IAAA,tHACE,AAACK,wBAAQb,kGAAe,WAAKpB,UAAMkC;AAAX,AAAA,0FAAA,mFAAA,qDAA0BlC,kBAAOA;WAD3D,8BAAA,mFAAA,IAAA,nHAEE,AAACmC,qBAAKf,kGAAe,WAAKpB,UAAMkC;AAAX,AAAiB,IAAAE,aAAgBF;UAAhB,AAAAL,4CAAAO,WAAA,IAAA,jEAAOC;UAAP,AAAAR,4CAAAO,WAAA,IAAA,jEAAWE;AAAX,AACE,IAAAC,aAAA,mFAAA,mFAAA,qDACcF,YAAK,AAAA,mFAAOA;aAD1B,AAAAR,4CAAAU,WAAA,IAAA,pEAAOC;cAAP,AAAAX,4CAAAU,WAAA,IAAA,rEAAcF;AAAd,AAAA,0FACkCG,OAAOH;WAJnF;WAA1B,AAAAR,4CAAAD,WAAA,IAAA,lEAAOE;WAAP,AAAAD,4CAAAD,WAAA,IAAA,lEAAYG;cAAZ,AAAAF,4CAAAD,WAAA,IAAA,rEAAiBI;AAAjB,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,sBAAA,oDAK2C,CAAA,wDAAA,JAAad,2BAAWY,KAChE,AAACR,8CAAM,AAACC,oDAAY,WAAKvB,UAAMkC;AAAX,AACE,IAAAO,aAAoB,CAACT,wCAAAA,wDAAAA,lBAAQhC,oCAAAA,1BAAMkC,oCAAAA;cAAnC,AAAAL,4CAAAY,WAAA,IAAA,rEAAOC;UAAP,AAAAb,4CAAAY,WAAA,IAAA,jEAAeJ;AAAf,AAAA,0FAAA,iDAAA,2CAAA,kLAAA,mFAAA,mDAAA,2CAAA,8LAAA,yHAAA,2CAAA,mIAAA,gEAAA,gLAAA,pgCACa,wDAAA,XAAKrC,2DAAUkB,2PACb,wDAAA,XAAKlB,2DAAUkB,sBAAKmB,+FAE/B3C,yIAAoB,CAAA,qDAAcM,6EACd0C,4DACF,wDAAA,XAAK1C,iEAAgBkB,qEACnBL;GAC1B,AAAA,mFAAA,AAAAI,gBAAQJ,qBAAekB;KAhBhD;;AAXN,AAAAnB","names":["enigma-nexus.tree.ro.tree/tree-widget","props","map__59078","cljs.core/--destructure-map","cljs.core.get","tree*","index","with-let59084","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__59044__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init59085","cljs.core/not","res59086","inner-tree*","reagent.core/cursor","indicators*","map__59094","cljs.core/deref","id","class","tree","component","cljs.core.doall","cljs.core.map_indexed","c-index","c","and__5041__auto__","cljs.core/coll?","vec__59096","cljs.core.nth","o-br","c-br","get-key","cljs.core/vector?","item","cljs.core/map?","vec__59100","key","val","vec__59103","_index","vec__59108","r-index"],"sourcesContent":["(ns enigma-nexus.tree.ro.tree\r\n  (:require\r\n   [reagent.core :as r :refer [with-let]]))\r\n\r\n(defn tree-widget [props]\r\n  (let [{:keys [tree* index]} props]\r\n    (r/with-let [inner-tree* (r/cursor tree* (if index index []))\r\n                 indicators* (r/cursor inner-tree* [:indicators])]\r\n      (let [{:keys [id class tree component]} @inner-tree*]\r\n        [:div {:class (str \"tree-node \" class :key (str  id \"_0\"))}\r\n         [:div {:class \"inner-tree-value\" :key (str id \"_1\")}\r\n          (doall (map-indexed (fn [c-index c]\r\n                                [c {:tree* inner-tree*\r\n                                    :value tree\r\n                                    :indicators* indicators*\r\n                                    :key (str \"skin_componet_\"  id \"_\" (+ c-index 3))}]) component))\r\n\r\n          (if (and (:expanded @indicators*) (coll? tree))\r\n            (let [[o-br c-br get-key] (cond\r\n                                        (vector? tree) [\"[\" \"]\" (fn [index item]  [[:tree index] index])]\r\n                                        (map? tree) [\"{\" \"}\" (fn [index item] (let [[key val] item]\r\n                                                                                (let [[_index key]\r\n                                                                                      [[:tree key] (:tree key)]] [_index key])))])]\r\n              [:div {:class \"inner-tree-children\" :key (str \"coll_\" id \"_2\")}\t\to-br\r\n               (doall (map-indexed (fn [index item]\r\n                                     (let [[r-index key] (get-key index item)]\r\n                                       [:<> {:key (str index \"-\" id)}\r\n                                        [:div {:key (str index \"+\" id)} key]\r\n\r\n                                        [tree-widget {:class (str \"child-\" index)\r\n                                                      :index r-index\r\n                                                      :key (str index \"_child_\" id)\r\n                                                      :tree* inner-tree*}]]))\r\n                                   (:tree @inner-tree*))) c-br]))]]))))\r\n"]}