{"version":3,"sources":["enigma_nexus/tree/ro/tree.cljs"],"mappings":"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","names":["enigma-nexus.tree.ro.tree/tree-widget1","props","map__61164","cljs.core/--destructure-map","cljs.core.get","data*","map__61166","cljs.core/deref","id","class","data","indicators","component","data_type","cljs.core/map?","cljs.core/vector?","cljs.core/set?","cljs.core/Keyword","cljs.core.doall","cljs.core.map_indexed","index","c","js/console.log","and__5041__auto__","cljs.core/coll?","get-key-and-index","item","vec__61174","cljs.core.nth","key","val","vec__61177","r-index","enigma-nexus.tree.ro.tree/tree-widget","reagent.core/cursor","map__61186","map__61188","vec__61197","vec__61200"],"sourcesContent":["(ns enigma-nexus.tree.ro.tree\r\n  (:require\r\n   [reagent.core :as r :refer [with-let]]))\r\n(declare tree-widget)\r\n(defn tree-widget1 [props]\r\n  (let [{:keys [data*]} props]\r\n    (let [{:keys [id class data indicators component]} @data*]\r\n      [:div {:class (str \"tree-node \" class) :key (str  id \"_0\")}\r\n       [:div {:class \"inner-tree-value\" :key (str id \"_1\")}\r\n       \t(let [data_type (cond \r\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(map? data) \"map\"\r\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(vector? data) \"vector\"\r\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(set? data) \"set\"\r\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(string? data) \"string\"\r\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(keyword? data) \"keyword\"\r\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:else \"unknown\")  ]\r\n       \t        (doall (map-indexed (fn [index c] [c {:data* data* :value data :key index :debug_print (js/console.log (str \"inner-tree-value data type : \" data_type  \"    ----  \" data ))}]) component)))\r\n       \t(if (and (:expanded indicators) (coll? data))\r\n          (let [get-key-and-index (cond\r\n\t\t\t\t\t\t                               (vector? data) (fn [index item] [[:data index] index])\r\n\t\t\t\t\t\t                               (map? data)    (fn [index item] (let [[key val] item] [[:data key] (:data key)])))]\r\n            [:div {:class \"inner-tree-children\" :key (str \"coll_\" id \"_2\")}\t\r\n             (doall (map-indexed (fn [index item]\r\n                                   (let [[r-index key] (get-key-and-index index item)]\r\n                                     [:<> {:key (str index \"-\" id)}\r\n                                      [:div {:key (str \"_\" index)} key]\r\n                                      [tree-widget {:class (str \"child-\" index) :key index :data* (r/cursor data* r-index)}]]))\r\n                                 (:data @data*)))]))]])))\r\n(defn tree-widget [props]\r\n  (let [{:keys [data*]} props]\r\n    (let [{:keys [id class data indicators component]} @data*]\r\n      [:div {:class (str \"tree-node \" class) :key (str  id \"_0\")}\r\n       [:div {:class \"inner-tree-value\" :key (str id \"_1\")}\r\n       \t(let [data_type (cond \r\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(map? data) \"map\"\r\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(vector? data) \"vector\"\r\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(set? data) \"set\"\r\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(string? data) \"string\"\r\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(keyword? data) \"keyword\"\r\n       \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t:else \"unknown\")  ]\r\n       \t        (doall (map-indexed (fn [index c] [c {:data* data* :value data :key index :debug_print (js/console.log (str \"inner-tree-value data type : \" data_type  \"    ----  \" data ))}]) component)))\r\n       \t(if (and (:expanded indicators) (coll? data))\r\n       \t\t\t\t(cond \r\n      \t\t\t\t\t\t\t(vector? data) \r\n\t\t\t\t\t\t\t\t\t      \t\t\t\t\t\t\t[:div {:class \"inner-tree-children\" :key (str \"coll_\" id \"_2\")}\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t             (doall (map-indexed (fn [index item]\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                  \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                      [tree-widget {:class (str \"child-\" index)  :key index :data* (r/cursor data* [:data index])}])\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                 (:data @data*)))]\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(map? data)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(let [get-key-and-index (fn [index item] (let [[key val] item] [[:data key] (:data key)]))]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t            [:div {:class \"inner-tree-children\" :key (str \"coll_\" id \"_2\")}\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t             (doall (map-indexed (fn [index item]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                   (let [[r-index key] (get-key-and-index index item)]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                     [:<> {:key (str index \"-\" id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                      [:div {:key (str \"_\" index)} key]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                      [tree-widget {:class (str \"child-\" index) :key index :data* (r/cursor data* r-index)}]]))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                 (:data @data*)))])\r\n       \t\t\t\t))]])))\r\n"]}