{"version":3,"sources":["enigma_nexus/tree/node/node.cljs"],"mappings":";AAMA,mCAAA,nCAAMA,8EAAMC;AAAZ,AACE,IAAAC,gBAAA,AAAAC,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAF,6BAAA,AAAAI;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAR,2BAAA,AAAAI;;;AAAA,IAAAK,YAAA,CAAA,AAAAT,yBAAA;qBAAA,EAAA,EAAAS,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,+DAAA,CAAAA,cAAA,rLAAaY,8GAAU,gDAAA,hDAACC;IAAxBF,WAAA,AACE,iBAAAG,aAAwFf;IAAxFe,iBAAA,AAAAC,4BAAAD;mBAAA,AAAAE,4CAAAF,eAAA,1EAAcG;YAAd,AAAAD,4CAAAF,eAAA,nEAA2BI;YAA3B,AAAAF,4CAAAF,eAAA,nEAAiCK;WAAjC,AAAAH,4CAAAF,eAAA,lEAAuCM;YAAvC,AAAAJ,4CAAAF,eAAA,nEAA4CO;qBAA5C,AAAAL,4CAAAF,eAAA,5EAAkDQ;aAAlD,AAAAN,4CAAAF,eAAA,pEAAiES;qBAAjE,AAAAP,4CAAAF,eAAA,5EAAuEU;AAAvE,AAAA,0FAAA,mDACQ,uGAAA,2CAAA,uEAAA,2CAAA,pQAACC,0MACQF,iHACAF,cACR,iBAAAK,WAAMN;IAANM,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,kDAAA,6DACoB,WAAKE;AAAL,AACE,AAAGA;;AACH,OAACC,mDAAMjB,eAAUF;;;;KAHvC;AAAA,kDAAA,0EAAA;AAAA,AAI2B,4CAAA,rCAACoB,sBAAOlB;GAJnC,0EAAA;AAAA,AAK2B,4CAAA,rCAACkB,sBAAOlB;;;;;AACjC,OAAA,uFAASb;;;WAEjBmB,MACA,kBAAA,AAAAa,gBAAKnB,iBACH,iBAAMoB,cAAY,AAACC,gBAAMd;AAAzB,AAAA,0FAAA,mDAAA,2CAAA,sEAAA,fACgBG,uEACAE,uBACb,AAACU,oDAAY,WAAKC,MAAMC;AAAX,AAAA,0FAAA,iDAAA,2CAAA,mJAAA,/FACa,AAAA,gFAAKA,kGACdtC,iCAAK,uGAAA,2CAAA,lJAAC2B,wNAAqBR,qBAAcmB,oBAC1C,8EAAA,mFAAA,mDAAA,2CAAA,0LAAA,vbAAI,AAACC,gDAAKF,MAAM,eAAA,dAAKH,8PACL,AAAA,oGAAgBf;GACnCE;KATlB;;AAdL,AAAAR","names":["enigma-nexus.tree.node.node/node","props","with-let61151","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__59154__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init61152","cljs.core/not","res61154","expanded*","reagent.core.atom","map__61162","cljs.core/--destructure-map","cljs.core.get","tree-options","value","nodes","type","style","expanded-style","class","expanded-class","cljs.core.merge","G__61163","cljs.core/Keyword","e","cljs.core.swap_BANG_","cljs.core/reset!","cljs.core/deref","child-count","cljs.core/count","cljs.core.map_indexed","index","child","cljs.core.not_EQ_"],"sourcesContent":["(ns enigma-nexus.tree.node.node\r\n  (:require\r\n   [reagent.core :as r :refer [with-let]]))\r\n\r\n\r\n;; Used by the table's menu\r\n(defn node [props]\r\n  (r/with-let [expanded* (r/atom false)]\r\n    (let [{:keys [tree-options value nodes type style expanded-style class expanded-class]} props]\r\n      [:div (merge\r\n             {:class class}\r\n             {:style style}\r\n             (case type\r\n               :click {:on-click (fn [e]\r\n                                   (. e stopPropagation)\r\n                                   (swap! expanded* not))}\r\n               :hover {:on-mouse-enter #(reset! expanded* true)\r\n                       :on-mouse-leave #(reset! expanded* false)}\r\n               (:events props)))\r\n\r\n       value\r\n       (if @expanded*\r\n         (let [child-count (count nodes)]\r\n           [:div {:style expanded-style\r\n                  :class expanded-class}\r\n            (map-indexed (fn [index child]\r\n                           [:<> {:key (:id child)}\r\n                            [node (merge {:tree-options tree-options} child)]\r\n                            (if (not= index (dec child-count))\r\n                              [:div {:class (:separator-css tree-options)}])])\r\n                         nodes)]))])))"]}