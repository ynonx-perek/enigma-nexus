{"version":3,"sources":["enigma_nexus/tree/rw/tree.cljs"],"mappings":";AAIA,wCAAA,xCAAMA,wFAAaC;AAAnB,AACE,IAAAC,aAA4BD;IAA5BC,iBAAA,AAAAC,4BAAAD;iBAAA,AAAAE,4CAAAF,eAAA,xEAAcG;YAAd,AAAAD,4CAAAF,eAAA,nEAAoBI;AAApB,AACE,IAAAC,gBAAA,AAAAC,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAF,6BAAA,AAAAI;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAR,2BAAA,AAAAI;;;AAAA,IAAAK,YAAA,CAAA,AAAAT,yBAAA;uBAAA,EAAA,EAAAS,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,oMAAA,CAAAA,cAAA,5TAAaY,gHAAY,+BAAA,mFAAA,lHAACC,oBAASf;IAAnCa,WAAA,AACE,iBAAAG,aAAA,AAAAC,gBAAqDjB;IAArDgB,iBAAA,AAAAlB,4BAAAkB;SAAA,AAAAjB,4CAAAiB,eAAA,hEAAcE;aAAd,AAAAnB,4CAAAiB,eAAA,pEAAiBG;YAAjB,AAAApB,4CAAAiB,eAAA,nEAAuBI;gBAAvB,AAAArB,4CAAAiB,eAAA,vEAA6BK;iBAA7B,AAAAtB,4CAAAiB,eAAA,xEAAuCM;AAAvC,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,HACcJ,2DAAU,CAAA,yDAAkBC,0BACvC,yWAAA,mFAAA,mDAAA,2CAAA,wDAAA,hlBAAI,GAAK,0BAAA,iFAAA,8DAAA,zKAACI,gPAA0B,AAAA,mFAAA,AAAAN,gBAAQjB,qRAEzC,AAACwB,cAAI,+CAAA,mFAAA,lIAACC,mLACK,AAACC,8CAAM,AAACC,oDAAY,WAAKC,QAAQC;AAAb,AAAA,4FAAA,2CAAA,4DAAA,kEAAA,4DAAA,vOACGA,iGAAQD,+DACE5B,iEACAoB,0EACMN;iCAPrD,9BAOoEO,oCAEpE,+IAAA,mFAAA,mDAAA,2CAAA,wDAAA,tWAAI,AAAA,yFAAA,AAAAJ,gBAAYH,2RAEb,AAACU,cAAI,+CAAA,mFAAA,lIAACC,mLACK,AAACC,8CAAM,AAACC,oDAAY,WAAK1B,UAAM6B;AAAX,AAAA,gIAAA,2CAAA,mIAAA,kEAAA,8DAAA,pVACGnC,yIAAoB,CAAA,qDAAcM,6EACdA,8DACFA,iEACE,+BAAA,mFAAA,lHAACc,oBAASf,mJAAaC;uIAPhF,pIAO2F,AAAA,mFAAA,AAAAgB,gBAAQjB;;AAnBxG,AAAAa","names":["enigma-nexus.tree.rw.tree/tree-widget","props","map__59079","cljs.core/--destructure-map","cljs.core.get","tree*","index","with-let59087","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__59044__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init59088","cljs.core/not","res59089","indicators*","reagent.core/cursor","map__59095","cljs.core/deref","id","class","value","component","indicators","cljs.core/contains?","cljs.core/vec","cljs.core.concat","cljs.core.doall","cljs.core.map_indexed","c-index","c","child-node"],"sourcesContent":["(ns enigma-nexus.tree.rw.tree\r\n  (:require\r\n   [reagent.core :as r :refer [with-let]]))\r\n\r\n(defn tree-widget [props]\r\n  (let [{:keys [tree* index]} props]\r\n    (r/with-let [indicators* (r/cursor tree* [:indicators])]\r\n      (let [{:keys [id class value component indicators]} @tree*]\r\n        [:div {:key id :class (str \"tree-node \" class)}\r\n         (if (not (contains? #{:vector :map} (:type @tree*)))\r\n           [:div {:class \"inner-tree-value\"}\r\n            (vec (concat\r\n                  [:<> (doall (map-indexed (fn [c-index c]\r\n                                             [c {:key c-index\r\n                                                 :tree* tree*\r\n                                                 :value value\r\n                                                 :indicators* indicators*}]) component))]))])\r\n\r\n         (if (:expanded @indicators*)\r\n           [:div {:class \"inner-tree-children\"}\r\n            (vec (concat\r\n                  [:<> (doall (map-indexed (fn [index child-node]\r\n                                             [tree-widget {:class (str \"child-\" index)\r\n                                                           :index index\r\n                                                           :key index\r\n                                                           :tree* (r/cursor tree* [:tree index])}]) (:tree @tree*)))]))])]))))\r\n\r\n"]}