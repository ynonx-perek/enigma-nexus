{"version":3,"sources":["reagent/session.cljs"],"mappings":"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","names":["js/reagent","js/reagent.session","js/reagent.session.state","reagent.session/state","reagent.core.atom","reagent.session/cursor","ks","reagent.core/cursor","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","reagent.session/get","p__70587","vec__70588","cljs.core.nth","seq70571","G__70572","cljs.core/first","cljs.core/next","self__5751__auto__","k","default","cljs.core/deref","temp-a","reagent.session/put!","v","cljs.core.swap_BANG_","cljs.core/assoc","reagent.session/get-in","p__70639","vec__70641","seq70599","G__70600","result","reagent.session/swap!","seq70658","G__70659","f","args","cljs.core.apply","cljs.core/swap!","reagent.session/clear!","cljs.core/reset!","reagent.session/reset!","m","reagent.session/remove!","cljs.core/dissoc","reagent.session/assoc-in!","cljs.core/assoc-in","reagent.session/get!","p__70731","vec__70733","seq70725","G__70726","cur","reagent.session.get","reagent.session/get-in!","p__70751","vec__70752","seq70740","G__70741","reagent.session.get_in","reagent.session/update!","seq70760","G__70761","G__70762","p1__70759#","cljs.core.partial","cljs.core/update","reagent.session/update-in!","seq70771","G__70772","G__70773","p1__70770#","cljs.core/update-in"],"sourcesContent":["(ns reagent.session\n  (:refer-clojure :exclude [get get-in reset! swap!])\n  (:require [reagent.core :as reagent :refer [atom]]))\n\n(defonce state (atom {}))\n\n(defn cursor\n  \"Returns a cursor from the state atom.\"\n  [ks]\n  (reagent/cursor state ks))\n\n(defn get\n  \"Get the key's value from the session, returns nil if it doesn't exist.\"\n  [k & [default]]\n  (let [temp-a @(cursor [k])]\n    (if-not (nil? temp-a) temp-a default)))\n\n(defn put! [k v]\n  (clojure.core/swap! state assoc k v))\n\n(defn get-in\n \"Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist.\"\n  [ks & [default]]\n  (let [result @(cursor ks)]\n    (if-not (nil? result) result default)))\n\n(defn swap!\n  \"Replace the current session's value with the result of executing f with\n  the current value and args.\"\n  [f & args]\n  (apply clojure.core/swap! state f args))\n\n(defn clear!\n  \"Remove all data from the session and start over cleanly.\"\n  []\n  (clojure.core/reset! state {}))\n\n(defn reset! [m]\n  (clojure.core/reset! state m))\n\n(defn remove!\n  \"Remove a key from the session\"\n  [k]\n  (clojure.core/swap! state dissoc k))\n\n(defn assoc-in!\n  \"Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created.\"\n  [ks v]\n  (clojure.core/swap! state assoc-in  ks v))\n\n(defn get!\n  \"Destructive get from the session. This returns the current value of the key\n  and then removes it from the session.\"[k & [default]]\n  (let [cur (get k default)]\n    (remove! k)\n    cur))\n\n(defn get-in!\n  \"Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session.\"\n  [ks & [default]]\n    (let [cur (get-in ks default)]\n      (assoc-in! ks nil)\n      cur))\n\n(defn update!\n  \"Updates a value in session where k is a key and f\n   is the function that takes the old value along with any\n   supplied args and return the new value. If key is not\n   present it will be added.\"\n  [k f & args]\n  (clojure.core/swap!\n    state\n    #(apply (partial update % k f) args)))\n\n(defn update-in!\n  \"Updates a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created.\"\n  [ks f & args]\n  (clojure.core/swap!\n    state\n    #(apply (partial update-in % ks f) args)))\n"]}