{"version":3,"sources":["enigma_nexus/table/skins.cljs"],"mappings":";AAaA,+CAAA,/CAAMA,sGAAqBC;AAA3B,AACE,IAAAC,aAAgFD;IAAhFC,iBAAA,AAAAC,4BAAAD;uBAAA,AAAAE,4CAAAF,eAAA,9EAAcG;gBAAd,AAAAD,4CAAAF,eAAA,vEAA0BI;mBAA1B,AAAAF,4CAAAF,eAAA,1EAAoCK;YAApC,AAAAH,4CAAAF,eAAA,nEAAiDM;gBAAjD,AAAAJ,4CAAAF,eAAA,vEAAuDO;mBAAvD,AAAAL,4CAAAF,eAAA,1EAAiEQ;AAAjE,AACE,GAAI,AAACC,uBAAOH;AAAZ,0FAAA,mDAAA,2CAAA,wDAAA,8BAAA;;AAAA,0FAAA,mDAAA,2CAAA,wDAAA,wBAEiC,AAACI,4CAAI,WAAKC;AAAL,AAAA,0FAAA,qDAA2BA;GAAgBL;;;AAErF,4CAAA,5CAAMM,gGAAkBb;AAAxB,AACE,IAAAc,aAAgFd;IAAhFc,iBAAA,AAAAZ,4BAAAY;uBAAA,AAAAX,4CAAAW,eAAA,9EAAcV;gBAAd,AAAAD,4CAAAW,eAAA,vEAA0BT;mBAA1B,AAAAF,4CAAAW,eAAA,1EAAoCR;YAApC,AAAAH,4CAAAW,eAAA,nEAAiDP;gBAAjD,AAAAJ,4CAAAW,eAAA,vEAAuDN;mBAAvD,AAAAL,4CAAAW,eAAA,1EAAiEL;AAAjE,AAAA,0FAAA,sDAAA,2CAAA,qDAAA,sDAAA,+DAEsB,WAAKM;AAAL,AACE,IAAMC,UAAQ,AAAA,AAAID;AAAlB,AACE,OAACE,6CAAoBb,iBAAYC,UAAUC,aAAaU,QAAQP;GAJ1F,sDAKkBF;;AAEpB,2CAAA,3CAAMW,8FAAiBlB;AAAvB,AACE,IAAAmB,aAAgFnB;IAAhFmB,iBAAA,AAAAjB,4BAAAiB;uBAAA,AAAAhB,4CAAAgB,eAAA,9EAAcf;gBAAd,AAAAD,4CAAAgB,eAAA,vEAA0Bd;mBAA1B,AAAAF,4CAAAgB,eAAA,1EAAoCb;YAApC,AAAAH,4CAAAgB,eAAA,nEAAiDZ;gBAAjD,AAAAJ,4CAAAgB,eAAA,vEAAuDX;mBAAvD,AAAAL,4CAAAgB,eAAA,1EAAiEV;AAAjE,AAAA,0FAAA,sDAAA,2CAAA,qDAAA,sDAAA,wDAAA,kBAAA,+DAGsB,WAAKM;AAAL,AACE,IAAMC,UAAQ,AAAA,AAAID;AAAlB,AACE,OAACE,6CAAoBb,iBAAYC,UAAUC,aAAaU,QAAQP;GAL1F,sDAMkBF;;AAEpB,2CAAA,3CAAMa,8FAAiBpB;AAAvB,AACE,IAAAqB,aAAgFrB;IAAhFqB,iBAAA,AAAAnB,4BAAAmB;uBAAA,AAAAlB,4CAAAkB,eAAA,9EAAcjB;gBAAd,AAAAD,4CAAAkB,eAAA,vEAA0BhB;mBAA1B,AAAAF,4CAAAkB,eAAA,1EAAoCf;YAApC,AAAAH,4CAAAkB,eAAA,nEAAiDd;gBAAjD,AAAAJ,4CAAAkB,eAAA,vEAAuDb;mBAAvD,AAAAL,4CAAAkB,eAAA,1EAAiEZ;AAAjE,AAAA,0FAAA,sDAAA,2CAAA,qDAAA,sDAAA,+DAEsB,WAAKM;AAAL,AACE,IAAMC,UAAQ,AAAA,AAAID;AAAlB,AACE,OAACE,6CAAoBb,iBAAYC,UAAUC,aAAaU,QAAQP;GAJ1F,sDAKkBF;;AAEpB,qCAAA,rCAAMe,kFAAWtB;AAAjB,AACE,IAAAuB,aAAsBvB;IAAtBuB,iBAAA,AAAArB,4BAAAqB;YAAA,AAAApB,4CAAAoB,eAAA,nEAAchB;AAAd,AACEA;;AAGJ,kCAAA,lCAAMiB,4EAAQxB;AAAd,AACE,IAAAyB,aAAgFzB;IAAhFyB,iBAAA,AAAAvB,4BAAAuB;uBAAA,AAAAtB,4CAAAsB,eAAA,9EAAcrB;gBAAd,AAAAD,4CAAAsB,eAAA,vEAA0BpB;mBAA1B,AAAAF,4CAAAsB,eAAA,1EAAoCnB;YAApC,AAAAH,4CAAAsB,eAAA,nEAAiDlB;gBAAjD,AAAAJ,4CAAAsB,eAAA,vEAAuDjB;mBAAvD,AAAAL,4CAAAsB,eAAA,1EAAiEhB;AAAjE,AACE,IAAAiB,gBAAA,AAAAC,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAF,6BAAA,AAAAI;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAR,2BAAA,AAAAI;;;AAAA,IAAAK,YAAA,CAAA,AAAAT,yBAAA;uBAAA,EAAA,EAAAS,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,gVAAA,CAAAA,cAAA,xcAAaY,gHAAY,qCAAA,mFAAA,8DAAA,wEAAA,9PAACC,oBAASnC,wJAAmBC,qEAAmBC;IAAzE+B,WAAA,AACE,6IAAA,mFAAA,mDAAA,2CAAA,wDAAA,6BAAA,yJAAA,mFAAA,mDAAA,2CAAA,wDAAA,gCAAA,nyBACE,AAAA,uFAAA,AAAAG,gBAAUF,4SACV,AAAA,mGAAA,AAAAE,gBAAiBF;AAHrB,AAAAD;;AAOJ,2CAAA,3CAAMI,8FAAiBzC;AAAvB,AACE,IAAA0C,aAAgF1C;IAAhF0C,iBAAA,AAAAxC,4BAAAwC;uBAAA,AAAAvC,4CAAAuC,eAAA,9EAActC;gBAAd,AAAAD,4CAAAuC,eAAA,vEAA0BrC;mBAA1B,AAAAF,4CAAAuC,eAAA,1EAAoCpC;YAApC,AAAAH,4CAAAuC,eAAA,nEAAiDnC;gBAAjD,AAAAJ,4CAAAuC,eAAA,vEAAuDlC;mBAAvD,AAAAL,4CAAAuC,eAAA,1EAAiEjC;AAAjE,AACE,IAAAkC,gBAAA,AAAAhB,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAe,6BAAA,AAAAb;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAS,2BAAA,AAAAb;;;AAAA,IAAAc,YAAA,CAAA,AAAAD,yBAAA;qBAAA,EAAA,EAAAC,eAAA,AAAAR,cAAA,AAAAO,6BAAA,SAAA,CAAAA,cAAA,oMAAA,CAAAA,cAAA,1TAAaG,8GAAU,qCAAA,mFAAA,xHAACP,oBAASnC;IAAjCyC,WAAA,AAAA,mFAAA,yDAAA,2CAAA,wDAAA,kBAAA,6DAAA;AAAA,AAEuB,4FAAA,rFAACE,mDAAM3C,iBAAY4C,4EAAiBZ;WACxD,kBAAA,AAAAI,iCAAA,IAAA,rBAAKM;AAHR,AAAAD;;AAOJ,uCAAA,vCAAMI,sFAAajD;AAAnB,AACE,IAAAkD,aAAgFlD;IAAhFkD,iBAAA,AAAAhD,4BAAAgD;uBAAA,AAAA/C,4CAAA+C,eAAA,9EAAc9C;gBAAd,AAAAD,4CAAA+C,eAAA,vEAA0B7C;mBAA1B,AAAAF,4CAAA+C,eAAA,1EAAoC5C;YAApC,AAAAH,4CAAA+C,eAAA,nEAAiD3C;gBAAjD,AAAAJ,4CAAA+C,eAAA,vEAAuD1C;mBAAvD,AAAAL,4CAAA+C,eAAA,1EAAiEzC;AAAjE,AACE,IAAA0C,gBAAA,AAAAxB,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAuB,6BAAA,AAAArB;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAiB,2BAAA,AAAArB;;;AAAA,IAAAsB,YAAA,CAAA,AAAAD,yBAAA;uBAAA,EAAA,EAAAC,eAAA,AAAAhB,cAAA,AAAAe,6BAAA,SAAA,CAAAA,cAAA,gVAAA,CAAAA,cAAA,xcAAab,gHAAY,qCAAA,mFAAA,8DAAA,wEAAA,9PAACC,oBAASnC,wJAAmBC,qEAAmBC;WAAzE,EAAA,EAAA8C,eAAA,AAAAhB,cAAA,AAAAe,6BAAA,SAAA,CAAAA,cAAA,6FAAA,CAAAA,cAAA,zMACaG,oGAAK,AAACC,4CAAmBnD,iBAAYC,UAAUC;IAD5D+C,WAAA,AAEE,iBAAAG,aAAA,AAAAhB,gBAAyBF;IAAzBkB,iBAAA,AAAAtD,4BAAAsD;cAAA,AAAArD,4CAAAqD,eAAA,rEAAcC;AAAd,AACE,oBAASA;AAAT,0FACGC,4BAAUJ;;AADb,0FAAA;;;AAHJ,AAAAD;;AAOJ,oCAAA,pCAAMM,gFAAU3D;AAAhB,AACE,IAAA4D,aAAgF5D;IAAhF4D,iBAAA,AAAA1D,4BAAA0D;uBAAA,AAAAzD,4CAAAyD,eAAA,9EAAcxD;gBAAd,AAAAD,4CAAAyD,eAAA,vEAA0BvD;mBAA1B,AAAAF,4CAAAyD,eAAA,1EAAoCtD;YAApC,AAAAH,4CAAAyD,eAAA,nEAAiDrD;gBAAjD,AAAAJ,4CAAAyD,eAAA,vEAAuDpD;mBAAvD,AAAAL,4CAAAyD,eAAA,1EAAiEnD;AAAjE,AACE,IAAAoD,gBAAA,AAAAlC,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAiC,6BAAA,AAAA/B;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAA2B,2BAAA,AAAA/B;;;AAAA,IAAAgC,YAAA,CAAA,AAAAD,yBAAA;uBAAA,EAAA,EAAAC,eAAA,AAAA1B,cAAA,AAAAyB,6BAAA,SAAA,CAAAA,cAAA,gVAAA,CAAAA,cAAA,xcAAavB,gHAAY,qCAAA,mFAAA,8DAAA,wEAAA,9PAACC,oBAASnC,wJAAmBC,qEAAmBC;WAAzE,EAAA,EAAAwD,eAAA,AAAA1B,cAAA,AAAAyB,6BAAA,SAAA,CAAAA,cAAA,0FAAA,CAAAA,cAAA,tMACaP,oGAAK,AAACU,yCAAgB5D,iBAAYC,UAAUC;IADzDyD,WAAA,AAEE,iBAAAE,aAAA,AAAAzB,gBAAyBF;IAAzB2B,iBAAA,AAAA/D,4BAAA+D;cAAA,AAAA9D,4CAAA8D,eAAA,rEAAcR;AAAd,AACE,oBAASA;AAAT,0FACGC,4BAAUJ;;AADb,0FAAA;;;AAHJ,AAAAS;;AAOJ,+BAAA,/BAAMG,sEAAKlE;AAAX,AACE,IAAAmE,aAAgFnE;IAAhFmE,iBAAA,AAAAjE,4BAAAiE;uBAAA,AAAAhE,4CAAAgE,eAAA,9EAAc/D;gBAAd,AAAAD,4CAAAgE,eAAA,vEAA0B9D;mBAA1B,AAAAF,4CAAAgE,eAAA,1EAAoC7D;YAApC,AAAAH,4CAAAgE,eAAA,nEAAiD5D;gBAAjD,AAAAJ,4CAAAgE,eAAA,vEAAuD3D;mBAAvD,AAAAL,4CAAAgE,eAAA,1EAAiE1D;AAAjE,AACE,IAAA2D,gBAAA,AAAAzC,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAwC,6BAAA,AAAAtC;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAkC,2BAAA,AAAAtC;;;AAAA,IAAAuC,YAAA,CAAA,AAAAD,yBAAA;uBAAA,EAAA,EAAAC,eAAA,AAAAjC,cAAA,AAAAgC,6BAAA,SAAA,CAAAA,cAAA,gVAAA,CAAAA,cAAA,xcAAa9B,gHAAY,qCAAA,mFAAA,8DAAA,wEAAA,9PAACC,oBAASnC,wJAAmBC,qEAAmBC;IAAzEgE,WAAA,AACE,iBAAAC,aAAA,AAAA/B,gBAAgCF;IAAhCiC,iBAAA,AAAArE,4BAAAqE;aAAA,AAAApE,4CAAAoE,eAAA,pEAAcC;cAAd,AAAArE,4CAAAoE,eAAA,rEAAqBd;AAArB,AACE,oBACEe;AADF,0FAAA,mDAAA,2CAAA,6DAAA;AAAA,AAEsB,0FAAA,nFAACzB,mDAAMT,iBAAYmC;GAFzC,wDAAA,qBAAA,mFAIWC;;AAJX,oBAKEjB;AALF,0FAAA,mDAAA,2CAAA,6DAAA;AAAA,AAMuB,0FAAA,nFAACV,mDAAMT,iBAAYqC;GAN1C,wDAAA,cAAA,mFAQYD;;AARZ;;;;AAFJ,AAAAJ;;AAYJ,gCAAA,hCAAMM,wEAAM5E;AAAZ,AACE,IAAA6E,aAAmD7E;IAAnD6E,iBAAA,AAAA3E,4BAAA2E;uBAAA,AAAA1E,4CAAA0E,eAAA,9EAAczE;gBAAd,AAAAD,4CAAA0E,eAAA,vEAA0BxE;mBAA1B,AAAAF,4CAAA0E,eAAA,1EAAoCvE;AAApC,AACE,IAAAwE,gBAAA,AAAAnD,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAkD,6BAAA,AAAAhD;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAA4C,2BAAA,AAAAhD;;;AAAA,IAAAiD,YAAA,CAAA,AAAAD,yBAAA;iBAAA,EAAA,EAAAC,eAAA,AAAA3C,cAAA,AAAA0C,6BAAA,SAAA,CAAAA,cAAA,+QAAA,CAAAA,cAAA,jYAAaG,0GAAM,qCAAA,mFAAA,8DAAA,tLAAC1C,oBAASnC,wJAAmBC,qEAAmBC;WAAnE,EAAA,EAAAyE,eAAA,AAAA3C,cAAA,AAAA0C,6BAAA,SAAA,CAAAA,cAAA,OAAA,2CAAA,sDAAA,yHAAA,wDAAA,oBAAA,yEAAA,6BAAA,sEAAA,2CAAA,sEAAA,yBAAA,qDAAA,uDAAA,wDAAA,mFAAA,2CAAA,uHAAA,wDAAA,iBAAA,sDAAA,OAAA,yDAAA,2CAAA,6DAAA,h4CACaxB,wRAAc4B,4vBAKK,4CAAK,AAACC;AANtC,AASiD,4FAAA,yDAAA,uDAAA,+DAAA,pQAACpC,0DAAMkC,WAAMG,kRAA+BR,8BAAK/D;mBATlG,2CAAA,uHAAA,wDAAA,iBAAA,sDAAA,YAAA,yDAAA,2CAAA,6DAAA,jXAUgC,4CAAK,AAACsE;AAVtC,AAagD,4FAAA,yDAAA,uDAAA,+DAAA,pQAACpC,0DAAMkC,WAAMG,kRAA+BR,8BAAK1D;mBAbjG,2CAAA,uHAAA,wDAAA,iBAAA,sDAAA,aAAA,yDAAA,2CAAA,6DAAA,lXAcgC,4CAAK,AAACiE;AAdtC,AAiBgD,4FAAA,yDAAA,uDAAA,+DAAA,pQAACpC,0DAAMkC,WAAMG,kRAA+BR,8BAAKxD;mBAjBjG,2CAAA,uHAAA,wDAAA,iBAAA,sDAAA,eAAA,yDAAA,2CAAA,6DAAA,pXAkBgC,4CAAK,AAAC+D;AAlBtC,AAqBgD,4FAAA,yDAAA,uDAAA,+DAAA,pQAACpC,0DAAMkC,WAAMG,kRAA+BR,8BAAKxD;oCArBjG,CAAA0D,cAAA;IAAAE,WAAA,AAuBE,iBAAAK,aAAwB,+CAAA,AAAA7C,4BAAA,mFAAA,9JAAC8C,+DAAQL;IAAjCI,iBAAA,AAAAnF,4BAAAmF;cAAA,AAAAlF,4CAAAkF,eAAA,rEAAc5B;AAAd,AACE,oBAASA;AAAT,0FACGC,4BAAUJ;;AADb,0FAAA;;;AAxBJ,AAAA0B;;AA6BJ,+CAAA,/CAAMO,sGAAqBvF;AAA3B,AACE,IAAAwF,aAAgFxF;IAAhFwF,iBAAA,AAAAtF,4BAAAsF;uBAAA,AAAArF,4CAAAqF,eAAA,9EAAcpF;gBAAd,AAAAD,4CAAAqF,eAAA,vEAA0BnF;mBAA1B,AAAAF,4CAAAqF,eAAA,1EAAoClF;YAApC,AAAAH,4CAAAqF,eAAA,nEAAiDjF;gBAAjD,AAAAJ,4CAAAqF,eAAA,vEAAuDhF;mBAAvD,AAAAL,4CAAAqF,eAAA,1EAAiE/E;AAAjE,AACE,IAAAgF,gBAAA,AAAA9D,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAA6D,6BAAA,AAAA3D;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAuD,2BAAA,AAAA3D;;;AAAA,IAAA4D,YAAA,CAAA,AAAAD,yBAAA;4BAAA,EAAA,EAAAC,eAAA,AAAAtD,cAAA,AAAAqD,6BAAA,SAAA,CAAAA,cAAA,yTAAA,CAAAA,cAAA,tbAAaG,qHAAiB,qCAAA,mFAAA,oDAAA,IAAA,2DAAA,IAAA,/OAACrD,oBAASnC;IAAxCuF,WAAA,AAAA,mFAAA,uDAAA,2CAAA,wDAAA,wBAAA,mFAAA,sDAAA,2CAAA,qDAAA,WAAA,kIAAA,+DAAA,vIAGqB,0BAAA,AAAAnD,1BAACqD,0CAAWD,uBAAiBrF;AAHlD,AAIwB,OAACwC,mDAAM6C,sBAAkB,WAAKE;AAAL,AACE,GAAI,AAACD,0BAAUC,QAAQvF;AACrB,OAACwF,6CAAKD,QAAQvF;;AACd,OAACyF,6CAAKF,QAAQvF;;;mBAAYA;AAP/E,AAAAoF;;AAQJ,gDAAA,hDAAMM,wGAAsBjG;AAA5B,AACE,IAAAkG,aAAgFlG;IAAhFkG,iBAAA,AAAAhG,4BAAAgG;uBAAA,AAAA/F,4CAAA+F,eAAA,9EAAc9F;gBAAd,AAAAD,4CAAA+F,eAAA,vEAA0B7F;mBAA1B,AAAAF,4CAAA+F,eAAA,1EAAoC5F;YAApC,AAAAH,4CAAA+F,eAAA,nEAAiD3F;gBAAjD,AAAAJ,4CAAA+F,eAAA,vEAAuD1F;mBAAvD,AAAAL,4CAAA+F,eAAA,1EAAiEzF;AAAjE,AACE,IAAA0F,gBAAA,AAAAxE,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAuE,6BAAA,AAAArE;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAiE,2BAAA,AAAArE;;;AAAA,IAAAsE,YAAA,CAAA,AAAAD,yBAAA;4BAAA,EAAA,EAAAC,eAAA,AAAAhE,cAAA,AAAA+D,6BAAA,SAAA,CAAAA,cAAA,yTAAA,CAAAA,cAAA,tbAAaP,qHAAiB,qCAAA,mFAAA,oDAAA,IAAA,2DAAA,IAAA,/OAACrD,oBAASnC;IAAxCiG,WAAA,AAAA,mFAAA,uDAAA,2CAAA,wDAAA,wBAAA,mFAAA,sDAAA,2CAAA,qDAAA,WAAA,kIAAA,+DAAA,vIAGqB,0BAAA,AAAA7D,1BAACqD,0CAAWD,uBAAiBrF;AAHlD,AAIwB,OAACwC,mDAAM3C,iBAAY,WAAKkG;AAAL,4EACMA,lDACA,6DAAA,mFAAA,oDAAA,IAAA,2DAAA,IAAA,vQAACC,wUAAwC,WAAKT,7WAI9C,OAACU;AAJwC,AACE,GAAI,AAACX,0BAAUC,QAAQvF;AACrB,OAACwF,6CAAKD,QAAQvF;;AACd,oDAAA,7CAACyF,+EAASzF;;IACvD,mFAAA,mEAAA;;mBAAkCA;AAVnF,AAAA8F;;AAYJ,0CAAA,1CAAMI,4FAAgBzG;AAAtB,AACE,IAAA0G,aAAgF1G;IAAhF0G,iBAAA,AAAAxG,4BAAAwG;uBAAA,AAAAvG,4CAAAuG,eAAA,9EAActG;gBAAd,AAAAD,4CAAAuG,eAAA,vEAA0BrG;mBAA1B,AAAAF,4CAAAuG,eAAA,1EAAoCpG;YAApC,AAAAH,4CAAAuG,eAAA,nEAAiDnG;gBAAjD,AAAAJ,4CAAAuG,eAAA,vEAAuDlG;mBAAvD,AAAAL,4CAAAuG,eAAA,1EAAiEjG;AAAjE,AACE,IAAAkG,gBAAA,AAAAhF,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAA+E,6BAAA,AAAA7E;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAyE,2BAAA,AAAA7E;;;AAAA,IAAA8E,YAAA,CAAA,AAAAD,yBAAA;6BAAA,EAAA,EAAAC,eAAA,AAAAxE,cAAA,AAAAuE,6BAAA,SAAA,CAAAA,cAAA,wUAAA,CAAAA,cAAA,tcAAaG,sHAAkB,qCAAA,mFAAA,8DAAA,wEAAA,9PAACvE,oBAASnC,wJAAmBC,qEAAmBC;IAA/EuG,WAAA,AAAA,kHAAA,2CAAA,0FAAA,wDAAA,5NACGE,6IAAoBD;AADvB,AAAAD;;AAGJ,yCAAA,zCAAMG,0FAAehH;AAArB,AACE,IAAAiH,aAAgFjH;IAAhFiH,iBAAA,AAAA/G,4BAAA+G;uBAAA,AAAA9G,4CAAA8G,eAAA,9EAAc7G;gBAAd,AAAAD,4CAAA8G,eAAA,vEAA0B5G;mBAA1B,AAAAF,4CAAA8G,eAAA,1EAAoC3G;YAApC,AAAAH,4CAAA8G,eAAA,nEAAiD1G;gBAAjD,AAAAJ,4CAAA8G,eAAA,vEAAuDzG;mBAAvD,AAAAL,4CAAA8G,eAAA,1EAAiExG;AAAjE,AACE,IAAAyG,gBAAA,AAAAvF,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAsF,6BAAA,AAAApF;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAgF,2BAAA,AAAApF;;;AAAA,IAAAqF,YAAA,CAAA,AAAAD,yBAAA;sBAAA,EAAA,EAAAC,eAAA,AAAA/E,cAAA,AAAA8E,6BAAA,SAAA,CAAAA,cAAA,wUAAA,CAAAA,cAAA,/bAAaG,+GAAW,qCAAA,mFAAA,8DAAA,wEAAA,9PAAC9E,oBAASnC,wJAAmBC,qEAAmBC;IAAxE8G,WAAA,AAAA,sHAAA,2CAAA,9EACGE,qIAAyBD;AAD5B,AAAAD;;AAGJ,wCAAA,xCAAMG,wFAAcvH;AAApB,AACE,IAAAwH,aAAgFxH;IAAhFwH,iBAAA,AAAAtH,4BAAAsH;uBAAA,AAAArH,4CAAAqH,eAAA,9EAAcpH;gBAAd,AAAAD,4CAAAqH,eAAA,vEAA0BnH;mBAA1B,AAAAF,4CAAAqH,eAAA,1EAAoClH;YAApC,AAAAH,4CAAAqH,eAAA,nEAAiDjH;gBAAjD,AAAAJ,4CAAAqH,eAAA,vEAAuDhH;mBAAvD,AAAAL,4CAAAqH,eAAA,1EAAiE/G;AAAjE,AACE,IAAAgH,gBAAA,AAAA9F,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAA6F,6BAAA,AAAA3F;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAuF,2BAAA,AAAA3F;;;AAAA,IAAA4F,YAAA,CAAA,AAAAD,yBAAA;wBAAA,EAAA,EAAAC,eAAA,AAAAtF,cAAA,AAAAqF,6BAAA,SAAA,CAAAA,cAAA,wUAAA,CAAAA,cAAA,jcAAaG,iHAAa,qCAAA,mFAAA,8DAAA,wEAAA,9PAACrF,oBAASnC,wJAAmBC,qEAAmBC;IAA1EqH,WAAA,AAAA,kHAAA,2CAAA,qFAAA,wDAAA,vNACGZ,6IAAoBa;AADvB,AAAAD;;AAGJ,AAAA,AAGA,mDAAA,nDAAME,8GAAyBC;AAA/B,AAAA,kDAAA,uHAAA,qDAAA,yDAAA,2DAAA,KAAA,oDAAA,mFAAA,2CAAA,uHAAA,2DAAA,vlBACO,4CAAK,AAAC3C,2aAGE,4CAAK,AAACA,uKACA,uCAAA,2CAAA,+DAAA,8HAAA,qDAAA,0DAAA,2GAAA,uHAAA,iEAAA,0CAAA,AAAA,2CAAA,+DAAA,8HAAA,qDAAA,mDAAA,8DAAA,uHAAA,iEAAA,/wCAAM,iBAAA4C,hBAAUD,iOAAmBxG,mNAEH,4CAAKwG,wDACV,4CAAK,AAAC3C,iUAGR7D,4MAGHwG,uDACL,4CAAK,AAAC3C;;;AAG5C,sDAAA,tDAAM6C,oHAA4BF;AAAlC,AAAA,kDAAA,uHAAA,2DAAA,KAAA,rIACO,4CAAK,AAAC3C,6IAEJ,AAAC8C,6CAAK,WAAKC;AAAL,AAAA,kDAAA,uHAAA,rEACO,4CAAK,AAAC/C,oFACD,AAAC8C,6CAAK,WAAK1H;AAAL,AACE,GACE,AAAC4H,wBAAQ5H;AADX,kDAAA,+DAAA,mIAAA,+SAAA,uHAAA,iEAAA,vhBAC+BkG,yGACH,CAACuB,oFAAAA,2FAAAA,TAA2BzH,uEAAAA,0DACjC,4CAAK,AAAC4E;;AAH7B,GAKE,AAACiD,qBAAK7H;AALR,kDAAA,+DAAA,mIAAA,ySAAA,uHAAA,iEAAA,jhBAK4BkG,yGACH,CAAC4B,kFAAAA,yFAAAA,TAAyB9H,qEAAAA,0DAC/B,4CAAK,AAAC4E;;AAP1B,GAUE,kBAAA4C,jBAAUxH;AAVZ,kDAAA,+DAAA,8HAAA,4GAAA,uHAAA,iEAAA,/UAUgCe,oGACH,4CAAKf,yDACV,4CAAK,AAAC4E;;AAZ9B,AAAA,kDAAA,+DAAA,8HAAA,+DAAA,uHAAA,iEAAA,lSAeqB7D,oGACHf,wDACL,4CAAK,AAAC4E;;;;;GAErB,oCAAA,lCAAI,AAACgD,wBAAQD,MAAKA,uFAAKA;GAASJ;;AAIjE,oDAAA,pDAAMQ,gHAA0BR;AAAhC,AAAA,kDAAA,uHAAA,2DAAA,KAAA,oDAAA,mFAAA,2CAAA,uHAAA,9aACO,4CAAK,AAAC3C,6TAEE,4CAAK,AAACA,oFACD,AAAC8C,6CAAK,WAAK1H;AAAL,AAAA,kDAAA,+DAAA,8HAAA,3CACee,oGACH,2FAAA,zFACE,kBAAAyG,jBAAUxH,qCAAO,4CAAKA,OAChBA;EAJpB,uHAAA,iEAAA,tIAKO,4CAAK,AAAC4E;GAEb2C;;AAE1B,oDAAA,pDAAMO,gHAA0BP;AAAhC,AAAA,kDAAA,uHAAA,2DAAA,KAAA,oDAAA,mFAAA,2CAAA,uHAAA,9aACO,4CAAK,AAAC3C,6TAEE,4CAAK,AAACA,oFACD,AAAC8C,6CAAK,WAAKM;AAAL,AAAA,kDAAA,+DAAA,8HAAA,3CACejH,oGACH,uFAAA,rFACE,gBAAAyG,fAAUQ,mCAAK,4CAAKA,KACdA;EAJpB,uHAAA,iEAAA,tIAKO,4CAAK,AAACpD;iCATvC,2CAAA,uHAAA,hMAW0B,AAACqD,eAAKV,4GAEjB,4CAAK,AAAC3C,oFACD,AAAC8C,6CAAK,WAAK1H;AAAL,AACE,GACE,AAAC4H,wBAAQ5H;AADX,kDAAA,+DAAA,mIAAA,oHAAA,uHAAA,iEAAA,5VAC+BkG,yGACH,AAACuB,oDAA2BzH,yDACjC,4CAAK,AAAC4E;;AAH7B,GAKE,AAACiD,qBAAK7H;AALR,kDAAA,+DAAA,mIAAA,ySAAA,uHAAA,iEAAA,jhBAK4BkG,yGACH,CAAC4B,kFAAAA,yFAAAA,TAAyB9H,qEAAAA,0DAC/B,4CAAK,AAAC4E;;AAP1B,GASE,AAACsD,qBAAKlI;AATR,kDAAA,+DAAA,mIAAA,kHAAA,uHAAA,iEAAA,1VAS4BkG,yGACH,AAAC6B,kDAAyB/H,yDAC/B,4CAAK,AAAC4E;;AAX1B,GAaE,kBAAA4C,jBAAUxH;AAbZ,kDAAA,+DAAA,8HAAA,4GAAA,uHAAA,iEAAA,/UAagCe,oGACH,4CAAKf,yDACV,4CAAK,AAAC4E;;AAf9B,AAAA,kDAAA,+DAAA,8HAAA,+DAAA,uHAAA,iEAAA,lSAiBqB7D,oGACHf,wDACL,4CAAK,AAAC4E;;;;;;GAErB,AAACuD,eAAKZ;;AAMhC,AAAA,AAEA,sDAAA,tDAAMa,oHAA4Bb;AAAlC,AAAA,kDAAA,uHAAA,2DAAA,KAAA,qDAAA,yDAAA,oDAAA,mFAAA,2CAAA,uHAAA,5hBACO,4CAAK,AAAC3C,2aAGE,4CAAK,AAACA,oFACD,AAAC8C,6CAAK,WAAKW;AAAL,AAAA,kDAAA,+DAAA,8HAAA,+DAAA,uHAAA,iEAAA,lSACetH,oGACHsH,wDACL,4CAAK,AAACzD;iFARvC,2CAAA,uHAAA,hPAU0B,AAAC0D,8CAAM,AAACC,gBAAMhB,6GAEzB,4CAAK,AAAC3C,oFACD,AAAC8C,6CAAK,WAAK1H;AAAL,AACE,GACE,AAAC4H,wBAAQ5H;AADX,kDAAA,+DAAA,mIAAA,+SAAA,uHAAA,iEAAA,vhBAC+BkG,yGACH,CAACkC,oFAAAA,2FAAAA,TAA2BpI,uEAAAA,0DACjC,4CAAK,AAAC4E;;AAH7B,GAME,AAACiD,qBAAK7H;AANR,kDAAA,+DAAA,mIAAA,ySAAA,uHAAA,iEAAA,jhBAM4BkG,yGACH,CAACsC,kFAAAA,yFAAAA,TAAyBxI,qEAAAA,0DAC/B,4CAAK,AAAC4E;;AAR1B,GAWE,kBAAA4C,jBAAUxH;AAXZ,kDAAA,+DAAA,8HAAA,4GAAA,uHAAA,iEAAA,/UAWgCe,oGACH,4CAAKf,yDACV,4CAAK,AAAC4E;;AAb9B,AAAA,kDAAA,+DAAA,8HAAA,+DAAA,uHAAA,iEAAA,lSAgBqB7D,oGACHf,wDACL,4CAAK,AAAC4E;;;;;GAErB2C;;AAI1B,oDAAA,pDAAMkB,gHAA0BlB;AAAhC,AAAA,kDAAA,uHAAA,2DAAA,KAAA,qDAAA,kDAAA,oDAAA,mFAAA,2CAAA,uHAAA,rhBACO,4CAAK,AAAC3C,oaAGE,4CAAK,AAACA,oFACD,AAAC8C,6CAAK,WAAK1H;AAAL,AAAA,kDAAA,+DAAA,8HAAA,3CACee,oGACH,2FAAA,zFACE,kBAAAyG,jBAAUxH,qCAAO,4CAAKA,OAChBA;EAJpB,uHAAA,iEAAA,tIAKO,4CAAK,AAAC4E;GAEb2C;;AAE1B,oDAAA,pDAAMiB,gHAA0BjB;AAAhC,AAAA,kDAAA,uHAAA,qDAAA,mDAAA,2DAAA,KAAA,oDAAA,mFAAA,2CAAA,uHAAA,thBACO,4CAAK,AAAC3C,qaAGE,4CAAK,AAACA,oFACD,AAAC8C,6CAAK,WAAKM;AAAL,AAAA,kDAAA,+DAAA,8HAAA,3CACejH,oGACH,uFAAA,rFACE,gBAAAyG,fAAUQ,mCAAK,4CAAKA,KACdA;EAJpB,uHAAA,iEAAA,tIAKO,4CAAK,AAACpD;iCAVvC,2CAAA,uHAAA,hMAY0B,AAACqD,eAAKV,4GAEjB,4CAAK,AAAC3C,oFACD,AAAC8C,6CAAK,WAAK1H;AAAL,AACE,GACE,AAAC4H,wBAAQ5H;AADX,kDAAA,+DAAA,mIAAA,oHAAA,uHAAA,iEAAA,5VAC+BkG,yGACH,AAACkC,oDAA2BpI,yDACjC,4CAAK,AAAC4E;;AAH7B,GAKE,AAACiD,qBAAK7H;AALR,kDAAA,+DAAA,mIAAA,ySAAA,uHAAA,iEAAA,jhBAK4BkG,yGACH,CAACsC,kFAAAA,yFAAAA,TAAyBxI,qEAAAA,0DAC/B,4CAAK,AAAC4E;;AAP1B,GASE,AAACsD,qBAAKlI;AATR,kDAAA,+DAAA,mIAAA,kHAAA,uHAAA,iEAAA,1VAS4BkG,yGACH,AAACuC,kDAAyBzI,yDAC/B,4CAAK,AAAC4E;;AAX1B,GAaE,kBAAA4C,jBAAUxH;AAbZ,kDAAA,+DAAA,8HAAA,4GAAA,uHAAA,iEAAA,/UAagCe,oGACH,4CAAKf,yDACV,4CAAK,AAAC4E;;AAf9B,AAAA,kDAAA,+DAAA,8HAAA,+DAAA,uHAAA,iEAAA,lSAiBqB7D,oGACHf,wDACL,4CAAK,AAAC4E;;;;;;GAErB,AAACuD,eAAKZ;;AAIhC,4CAAA,5CAAMmB,gGAAkBnB;AAAxB,AACE,GACE,GAAK,AAACoB,sBAAMpB;AAAO,OAACD,iDAAwBC;;AAD9C,GAEE,AAACK,wBAAQL;AAAM,OAACa,oDAA2Bb;;AAF7C,GAGE,AAACM,qBAAKN;AAAM,OAACiB,kDAAyBjB;;AAHxC","names":["enigma-nexus.table.skins/multi-select-header","props","map__77811","cljs.core/--destructure-map","cljs.core.get","table-data*","row-index","column-index","value","row-count","column-count","cljs.core/empty?","cljs.core.map","selected-item","enigma-nexus.table.skins/cell-date-select","map__77812","e","newtext","enigma-nexus.table.state/change-selection-at","enigma-nexus.table.skins/cell-text-input","map__77813","enigma-nexus.table.skins/cell-file-input","map__77814","enigma-nexus.table.skins/text-cell","map__77815","enigma-nexus.table.skins/danger","map__77816","with-let77817","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__59044__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init77818","cljs.core/not","res77819","indicators*","reagent.core/cursor","cljs.core/deref","enigma-nexus.table.skins/expand-collapse","map__77820","with-let77821","init77822","res77823","expanded*","cljs.core.swap_BANG_","cljs.core/update","enigma-nexus.table.skins/column-menu","map__77824","with-let77825","init77826","res77827","menu","enigma-nexus.table.state/create-column-menu","map__77828","hovered","enigma-nexus.tree.tree/node","enigma-nexus.table.skins/row-menu","map__77829","with-let77830","init77831","res77832","enigma-nexus.table.state/create-row-menu","map__77833","enigma-nexus.table.skins/pin","map__77834","with-let77835","init77836","res77837","map__77838","pinned","cljs.core/disj","enigma-nexus.tree.icons/pin","cljs.core/conj","enigma-nexus.table.skins/menu","map__77839","with-let77840","init77841","res77842","cell*","enigma-nexus.tree.icons/kebab","cljs.core/random-uuid","cljs.core/assoc","map__77843","cljs.core.get_in","enigma-nexus.table.skins/multi-select-option","map__77844","with-let77845","init77846","res77847","selected-values*","cljs.core/contains?","content","cljs.core.disj","cljs.core.conj","enigma-nexus.table.skins/single-select-option","map__77848","with-let77849","init77850","res77851","table-data","cljs.core.update_in","cljs.core/assoc-in","enigma-nexus.table.skins/table-in-table","map__77852","with-let77853","init77854","res77855","inner-table-data*","enigma-nexus.table.table/table","enigma-nexus.table.skins/tree-in-table","map__77856","with-let77857","init77858","res77859","tree-data*","enigma-nexus.tree.tree/tree-widget","enigma-nexus.table.skins/multi-select","map__77860","with-let77861","init77862","res77863","select-data*","enigma-nexus.table.skins/compile-scalar-to-table","data","cljs.core/Keyword","enigma-nexus.table.skins/compile-array-to-table-bfs","cljs.core.mapv","row","cljs.core/vector?","cljs.core/map?","enigma-nexus.table.skins/compile-map-to-table-bfs","enigma-nexus.table.skins/compile-set-to-table-bfs","key","cljs.core/keys","cljs.core/set?","cljs.core/vals","enigma-nexus.table.skins/compile-array-to-table-dfs","index","cljs.core.range","cljs.core/count","enigma-nexus.table.skins/compile-map-to-table-dfs","enigma-nexus.table.skins/compile-set-to-table-dfs","enigma-nexus.table.skins/compile-to-table","cljs.core/coll?"],"sourcesContent":["(ns enigma-nexus.table.skins\r\n  (:require\r\n   [reagent.core :as r :refer [with-let]]\r\n   [enigma-nexus.table.state :refer [duplicate-row! delete-row! new-row! create-row-menu create-column-menu change-selection-at]]\r\n   [enigma-nexus.tree.tree :as tree]\r\n   [enigma-nexus.table.table :refer [table]]\r\n   [enigma-nexus.tree.icons :as icons]))\r\n\r\n;; table/skins\r\n;; used inside table cells\r\n;; props are always:\r\n;; table-data* row-index column-index value row-count column-count\r\n\r\n(defn multi-select-header [props]\r\n  (let [{:keys [table-data* row-index column-index value row-count column-count]} props]\r\n    (if (empty? value)\r\n      [:div {:class \"select-header empty\"} \"Select ...\"]\r\n      [:div {:class \"select-header\"} (map (fn [selected-item] [:span selected-item]) value)])))\r\n\r\n(defn cell-date-select [props]\r\n  (let [{:keys [table-data* row-index column-index value row-count column-count]} props]\r\n    [:input {:type :date\r\n             :on-change (fn [e]\r\n                          (let [newtext (.. e -target -value)]\r\n                            (change-selection-at table-data* row-index column-index newtext column-count)))\r\n             :value value}]))\r\n\r\n(defn cell-text-input [props]\r\n  (let [{:keys [table-data* row-index column-index value row-count column-count]} props]\r\n    [:input {:type :text\r\n             :class \"cell-text-input\"\r\n             :on-change (fn [e]\r\n                          (let [newtext (.. e -target -value)]\r\n                            (change-selection-at table-data* row-index column-index newtext column-count)))\r\n             :value value}]))\r\n\r\n(defn cell-file-input [props]\r\n  (let [{:keys [table-data* row-index column-index value row-count column-count]} props]\r\n    [:input {:type :file\r\n             :on-change (fn [e]\r\n                          (let [newtext (.. e -target -value)]\r\n                            (change-selection-at table-data* row-index column-index newtext column-count)))\r\n             :value value}]))\r\n\r\n(defn text-cell [props]\r\n  (let [{:keys [value]} props]\r\n    value))\r\n\r\n\r\n(defn danger [props]\r\n  (let [{:keys [table-data* row-index column-index value row-count column-count]} props]\r\n    (r/with-let [indicators* (r/cursor table-data* [:rows row-index :columns column-index :indicators])]\r\n      (cond\r\n        (:danger @indicators*) [:div {:class \"danger-row\"}]\r\n        (:column-danger @indicators*) [:div {:class \"column-danger\"}]))))\r\n\r\n\r\n\r\n(defn expand-collapse [props]\r\n  (let [{:keys [table-data* row-index column-index value row-count column-count]} props]\r\n    (r/with-let [expanded* (r/cursor table-data* [:expanded])]\r\n      [:button {:class \"expand-collapse\"\r\n                :on-click #(swap! table-data* update :expanded not)}\r\n       (if @expanded* \"V\" \">\")])))\r\n\r\n\r\n\r\n(defn column-menu [props]\r\n  (let [{:keys [table-data* row-index column-index value row-count column-count]} props]\r\n    (r/with-let [indicators* (r/cursor table-data* [:rows row-index :columns column-index :indicators])\r\n                 menu (create-column-menu table-data* row-index column-index)]\r\n      (let [{:keys [hovered]} @indicators*]\r\n        (if (and hovered)\r\n          [tree/node menu]\r\n          [:<>])))))\r\n\r\n(defn row-menu [props]\r\n  (let [{:keys [table-data* row-index column-index value row-count column-count]} props]\r\n    (r/with-let [indicators* (r/cursor table-data* [:rows row-index :columns column-index :indicators])\r\n                 menu (create-row-menu table-data* row-index column-index)]\r\n      (let [{:keys [hovered]} @indicators*]\r\n        (if (and hovered)\r\n          [tree/node menu]\r\n          [:<>])))))\r\n\r\n(defn pin [props]\r\n  (let [{:keys [table-data* row-index column-index value row-count column-count]} props]\r\n    (r/with-let [indicators* (r/cursor table-data* [:rows row-index :columns column-index :indicators])]\r\n      (let [{:keys [pinned hovered]} @indicators*]\r\n        (cond\r\n          pinned [:div\r\n                  {:on-click #(swap! indicators* disj :pinned)\r\n                   :class \"pin pinned\"}\r\n                  [icons/pin]]\r\n          hovered [:div\r\n                   {:on-click #(swap! indicators* conj :pinned)\r\n                    :class \"pin\"}\r\n                   [icons/pin]])))))\r\n\r\n(defn menu [props]\r\n  (let [{:keys [table-data* row-index column-index]} props]\r\n    (r/with-let [cell* (r/cursor table-data* [:rows row-index :columns column-index])\r\n                 menu {:value [icons/kebab]\r\n                       :class \"default-cell-menu\"\r\n                       :expanded-class \"default-cell-menu-expanded\"\r\n                       :tree-options {:separator-css \"menu-separator\"}\r\n                       :type :click\r\n                       :nodes [{:id (str (random-uuid))\r\n                                :class \"text-menu-item\"\r\n                                :value \"Date\"\r\n                                :events  {:on-click #(swap! cell* assoc :content nil :component [menu cell-date-select])}}\r\n                               {:id (str (random-uuid))\r\n                                :class \"text-menu-item\"\r\n                                :value \"Text Cell\"\r\n                                :events {:on-click #(swap! cell* assoc :content nil :component [menu cell-text-input])}}\r\n                               {:id (str (random-uuid))\r\n                                :class \"text-menu-item\"\r\n                                :value \"File Input\"\r\n                                :events {:on-click #(swap! cell* assoc :content nil :component [menu cell-file-input])}}\r\n                               {:id (str (random-uuid))\r\n                                :class \"text-menu-item\"\r\n                                :value \"Multi Select\"\r\n                                :events {:on-click #(swap! cell* assoc :content nil :component [menu cell-file-input])}}]}]\r\n\r\n      (let [{:keys [hovered]} (get-in @cell* [:indicators])]\r\n        (if (and hovered)\r\n          [tree/node menu]\r\n          [:<>])))))\r\n\r\n\r\n(defn multi-select-option [props]\r\n  (let [{:keys [table-data* row-index column-index value row-count column-count]} props]\r\n    (r/with-let [selected-values* (r/cursor table-data* [:rows 0 :columns 0 :content])]\r\n      [:label {:class \"select-option\"}\r\n       [:input {:type \"checkbox\"\r\n                :checked (contains? @selected-values* value)\r\n                :on-change #(swap! selected-values*  (fn [content]\r\n                                                       (if (contains? content value)\r\n                                                         (disj content value)\r\n                                                         (conj content value))))}] value])))\r\n(defn single-select-option [props]\r\n  (let [{:keys [table-data* row-index column-index value row-count column-count]} props]\r\n    (r/with-let [selected-values* (r/cursor table-data* [:rows 0 :columns 0 :content])]\r\n      [:label {:class \"select-option\"}\r\n       [:input {:type \"checkbox\"\r\n                :checked (contains? @selected-values* value)\r\n                :on-change #(swap! table-data* (fn [table-data]\r\n                                                 (-> table-data\r\n                                                     (update-in [:rows 0 :columns 0 :content] (fn [content]\r\n                                                                                                (if (contains? content value)\r\n                                                                                                  (disj content value)\r\n                                                                                                  (conj #{} value))))\r\n                                                     (assoc-in [:expanded] false))))}] value])))\r\n\r\n(defn table-in-table [props]\r\n  (let [{:keys [table-data* row-index column-index value row-count column-count]} props]\r\n    (r/with-let [inner-table-data* (r/cursor table-data* [:rows row-index :columns column-index :content])]\r\n      [table {:table-data* inner-table-data* :class \"main-table\"}])))\r\n\r\n(defn tree-in-table [props]\r\n  (let [{:keys [table-data* row-index column-index value row-count column-count]} props]\r\n    (r/with-let [tree-data* (r/cursor table-data* [:rows row-index :columns column-index :content])]\r\n      [tree/tree-widget {:tree* tree-data*}])))\r\n\r\n(defn multi-select [props]\r\n  (let [{:keys [table-data* row-index column-index value row-count column-count]} props]\r\n    (r/with-let [select-data* (r/cursor table-data* [:rows row-index :columns column-index :content])]\r\n      [table {:table-data* select-data* :class \"multi-select\"}])))\r\n\r\n(declare compile-map-to-table-bfs)\r\n\r\n\r\n(defn compile-scalar-to-table [data]\r\n  {:id (str (random-uuid))\r\n   :type :scalar\r\n   :expanded true\r\n   :rows [{:id (str (random-uuid))\r\n           :columns [(cond (keyword? data) {:component [text-cell]\r\n                                            :type :keyword\r\n                                            :content (str data)\r\n                                            :id (str (random-uuid))\r\n                                            :indicators #{}}\r\n\r\n                           :else {:component [text-cell]\r\n                                  :type :str\r\n                                  ;; TODO what about number?\r\n                                  :content data\r\n                                  :id (str (random-uuid))\r\n                                  :indicators #{}})]}]})\r\n\r\n(defn compile-array-to-table-bfs [data]\r\n  {:id (str (random-uuid))\r\n   :expanded true\r\n   :rows (mapv (fn [row] \r\n                 {:id (str (random-uuid))\r\n                  :columns (mapv (fn [value]\r\n                                   (cond\r\n                                     (vector? value) {:component [table-in-table]\r\n                                                      :content (compile-array-to-table-bfs value)\r\n                                                      :id (str (random-uuid))\r\n                                                      :indicators #{}}\r\n                                     (map? value) {:component [table-in-table]\r\n                                                   :content (compile-map-to-table-bfs value)\r\n                                                   :id (str (random-uuid))\r\n                                                   :indicators #{}}\r\n                                     \r\n                                     (keyword? value) {:component [text-cell]\r\n                                                       :content (str value)\r\n                                                       :id (str (random-uuid))\r\n                                                       :indicators #{}}\r\n\r\n                                     :else {:component [text-cell]\r\n                                            :content value\r\n                                            :id (str (random-uuid))\r\n                                            :indicators #{}}))\r\n                                 (if (vector? row) row [row]))}) data)})\r\n\r\n\r\n\r\n(defn compile-set-to-table-bfs [data]\r\n  {:id (str (random-uuid))\r\n   :expanded true\r\n   :rows [{:id (str (random-uuid))\r\n           :columns (mapv (fn [value]\r\n                            {:component [text-cell]\r\n                             :content (cond\r\n                                        (keyword? value) (str value)\r\n                                        :else value)\r\n                             :id (str (random-uuid))\r\n                             :indicators #{}})\r\n                          data)}]})\r\n\r\n(defn compile-map-to-table-bfs [data]\r\n  {:id (str (random-uuid))\r\n   :expanded true\r\n   :rows [{:id (str (random-uuid))\r\n           :columns (mapv (fn [key]\r\n                            {:component [text-cell]\r\n                             :content (cond\r\n                                        (keyword? key) (str key)\r\n                                        :else key)\r\n                             :id (str (random-uuid))\r\n                             :indicators #{}})\r\n                          (keys data))}\r\n\r\n          {:id (str (random-uuid))\r\n           :columns (mapv (fn [value]\r\n                            (cond\r\n                              (vector? value) {:component [table-in-table]\r\n                                               :content (compile-array-to-table-bfs value)\r\n                                               :id (str (random-uuid))\r\n                                               :indicators #{}}\r\n                              (map? value) {:component [table-in-table]\r\n                                            :content (compile-map-to-table-bfs value)\r\n                                            :id (str (random-uuid))\r\n                                            :indicators #{}}\r\n                              (set? value) {:component [table-in-table]\r\n                                            :content (compile-set-to-table-bfs value)\r\n                                            :id (str (random-uuid))\r\n                                            :indicators #{}}\r\n                              (keyword? value) {:component [text-cell]\r\n                                                :content (str value)\r\n                                                :id (str (random-uuid))\r\n                                                :indicators #{}}\r\n                              :else {:component [text-cell]\r\n                                     :content value\r\n                                     :id (str (random-uuid))\r\n                                     :indicators #{}}))\r\n                          (vals data))}]})\r\n\r\n\r\n\r\n;;;;;;;;;;;;;;;;;;;;;;\r\n\r\n(declare compile-map-to-table-dfs)\r\n\r\n(defn compile-array-to-table-dfs [data]\r\n  {:id (str (random-uuid))\r\n   :expanded true\r\n   :type :vector\r\n   :rows [{:id (str (random-uuid))\r\n           :columns (mapv (fn [index]\r\n                            {:component [text-cell]\r\n                             :content index\r\n                             :id (str (random-uuid))\r\n                             :indicators #{}})\r\n                          (range (count data)))}\r\n\r\n          {:id (str (random-uuid))\r\n           :columns (mapv (fn [value]\r\n                            (cond\r\n                              (vector? value) {:component [table-in-table]\r\n                                               :content (compile-array-to-table-dfs value)\r\n                                               :id (str (random-uuid))\r\n                                               :indicators #{}}\r\n\r\n                              (map? value) {:component [table-in-table]\r\n                                            :content (compile-map-to-table-dfs value)\r\n                                            :id (str (random-uuid))\r\n                                            :indicators #{}}\r\n\r\n                              (keyword? value) {:component [text-cell]\r\n                                                :content (str value)\r\n                                                :id (str (random-uuid))\r\n                                                :indicators #{}}\r\n\r\n                              :else {:component [text-cell]\r\n                                     :content value\r\n                                     :id (str (random-uuid))\r\n                                     :indicators #{}}))\r\n                          data)}]})\r\n\r\n\r\n\r\n(defn compile-set-to-table-dfs [data]\r\n  {:id (str (random-uuid))\r\n   :expanded true\r\n   :type :set\r\n   :rows [{:id (str (random-uuid))\r\n           :columns (mapv (fn [value]\r\n                            {:component [text-cell]\r\n                             :content (cond\r\n                                        (keyword? value) (str value)\r\n                                        :else value)\r\n                             :id (str (random-uuid))\r\n                             :indicators #{}})\r\n                          data)}]})\r\n\r\n(defn compile-map-to-table-dfs [data]\r\n  {:id (str (random-uuid)) \r\n   :type :map\r\n   :expanded true\r\n   :rows [{:id (str (random-uuid))\r\n           :columns (mapv (fn [key]\r\n                            {:component [text-cell]\r\n                             :content (cond\r\n                                        (keyword? key) (str key)\r\n                                        :else key)\r\n                             :id (str (random-uuid))\r\n                             :indicators #{}})\r\n                          (keys data))}\r\n\r\n          {:id (str (random-uuid))\r\n           :columns (mapv (fn [value]\r\n                            (cond\r\n                              (vector? value) {:component [table-in-table]\r\n                                               :content (compile-array-to-table-dfs value)\r\n                                               :id (str (random-uuid))\r\n                                               :indicators #{}}\r\n                              (map? value) {:component [table-in-table]\r\n                                            :content (compile-map-to-table-dfs value)\r\n                                            :id (str (random-uuid))\r\n                                            :indicators #{}}\r\n                              (set? value) {:component [table-in-table]\r\n                                            :content (compile-set-to-table-dfs value)\r\n                                            :id (str (random-uuid))\r\n                                            :indicators #{}}\r\n                              (keyword? value) {:component [text-cell]\r\n                                                :content (str value)\r\n                                                :id (str (random-uuid))\r\n                                                :indicators #{}}\r\n                              :else {:component [text-cell]\r\n                                     :content value\r\n                                     :id (str (random-uuid))\r\n                                     :indicators #{}}))\r\n                          (vals data))}]})\r\n\r\n\r\n\r\n(defn compile-to-table [data]\r\n  (cond\r\n    (not (coll? data)) (compile-scalar-to-table data)\r\n    (vector? data) (compile-array-to-table-dfs data)\r\n    (map? data) (compile-map-to-table-dfs data)))\r\n\r\n;; (defn decompile-table-vector [tablevector]\r\n;;   )\r\n\r\n\r\n;; (defn decompile-from-table [tabledata]\r\n;;   (case (:type tabledata)\r\n;;     :vector (decompile-table-vector tabledata)\r\n;;     :map (decompile-table-map tabledata)\r\n;;     :set (decompile-table-set tabledata)\r\n;;     :scalar (decompile-table-scalar tabledata)))\r\n\r\n\r\n;; {:id (str (random-uuid))\r\n;;  :class \"main-tree\"\r\n;;  :value \"Task 2\"\r\n;;  :component [text-cell expand-collapse]\r\n;;  :indicators #{:expanded}\r\n;;  :tree [{:value \"Task 2.1\"\r\n;;          :id (str (random-uuid))\r\n;;          :indicators #{}\r\n;;          :component [text-cell expand-collapse]\r\n;;          :tree [{:value \"Task 2.1.1\"\r\n;;                  :indicators #{}\r\n;;                  :id (str (random-uuid))\r\n;;                  :component [text-cell expand-collapse]\r\n;;                  :tree [{:value \"document.txt\"\r\n;;                          :indicators #{}\r\n;;                          :id (str (random-uuid))\r\n;;                          :component [text-cell document-leaf]}\r\n;;                         {:value \"proposal.txt\"\r\n;;                          :indicators #{}\r\n;;                          :id (str (random-uuid))\r\n;;                          :component [text-cell document-leaf]}]}]}\r\n\r\n;;         {:value \"Task 2.2\"\r\n;;          :indicators #{}\r\n;;          :id (str (random-uuid))\r\n;;          :component [text-cell]}]}\r\n\r\n;; (defn map-to-tree [data]\r\n;;   {:id (str (random-uuid))\r\n;;    :value \"\"\r\n;;    :indicators #{:expanded}\r\n;;    :component [text-cell]\r\n;;    :tree [(mapv (fn [item] (cond\r\n;;                              (vector? item) {:value (array-to-tree item)\r\n;;                                              :indicators #{}\r\n;;                                              :id (str (random-uuid))\r\n;;                                              :component [tree]}\r\n  \r\n;;                              (map? item) {:value (map-to-tree item)\r\n;;                                           :indicators #{}\r\n;;                                           :id (str (random-uuid))\r\n;;                                           :component [tree]}\r\n  \r\n;;                              (set? item) {:value (set-to-tree item)\r\n;;                                           :indicators #{}\r\n;;                                           :id (str (random-uuid))\r\n;;                                           :component [tree]}\r\n  \r\n;;                              :else {:value item\r\n;;                                     :indicators #{}\r\n;;                                     :id (str (random-uuid))\r\n;;                                     :component [text-cell document-leaf]})) data)]})"]}