{"version":3,"sources":["enigma_nexus/tabs/tabs.cljs"],"mappings":"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","names":["var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","enigma-nexus.tabs.tabs/tab-header-cell","seq61679","G__61680","cljs.core/first","cljs.core/next","self__5751__auto__","props","children","map__61681","cljs.core/--destructure-map","cljs.core.get","multi-tab-table*","active-tab-index*","column-index","class","cljs.core/reset!","enigma-nexus.tabs.tabs/tab-headers","map__61683","tabs","cljs.core/deref","cljs.core.map","data*","cljs.core.doall","cljs.core.map_indexed","column","i","c","enigma-nexus.tabs.tabs/tabs","with-let61689","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__59154__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init61690","cljs.core/not","res61691","reagent.core.atom","map__61696","style","cljs.core.nth","enigma-nexus.tabs.state/add-new-tab","cljs.core.merge","enigma-nexus.table.table/table"],"sourcesContent":["(ns enigma-nexus.tabs.tabs\r\n  (:require\r\n   [reagent.core :as r :refer [with-let]]\r\n   [enigma-nexus.tabs.state :refer [add-new-tab]]\r\n   [enigma-nexus.table.table :refer [table]]))\r\n\r\n\r\n(defn tab-header-cell [props & children]\r\n  (let [{:keys [multi-tab-table* active-tab-index* column-index class]} props]\r\n    [:div {:class class\r\n           :on-click #(reset! active-tab-index* column-index)}\r\n     children]))\r\n\r\n(defn tab-headers [props]\r\n  (let [{:keys [multi-tab-table* active-tab-index* class]} props       \r\n        tabs (map (fn [data*] (:header @data*)) @multi-tab-table*)]\r\n\r\n    [:div {:class \"tab-header\"}\r\n     (doall (map-indexed (fn [column-index column]\r\n                           [tab-header-cell {:key (:id column)\r\n                                             :active-tab-index* active-tab-index*\r\n                                             :multi-tab-table* multi-tab-table*\r\n                                             :column-index column-index\r\n                                             :class (:class column)}\r\n                            (doall (map-indexed (fn [i c]\r\n                                                  [c {:key (str (:id column) \"-\" i)\r\n                                                      :column-index column-index\r\n                                                      :value (:content column)\r\n                                                      :multi-tab-table* multi-tab-table*\r\n                                                      :active-tab-index* active-tab-index*}]) (:component column)))]) tabs))]))\r\n\r\n(defn tabs [props]\r\n  (r/with-let [active-tab-index* (r/atom 0)]\r\n    (let [{:keys [multi-tab-table* class style]} props\r\n          data* (nth @multi-tab-table* @active-tab-index*)]\r\n\r\n      [:div {:class class}\r\n       [:button {:on-click #(add-new-tab multi-tab-table* 4 4)} \"Add New Tab\"]\r\n       [tab-headers (merge props {:active-tab-index* active-tab-index*})]\r\n       [table (merge props {:data* data*})]])))\r\n\r\n"]}