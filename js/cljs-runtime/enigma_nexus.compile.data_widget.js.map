{"version":3,"sources":["enigma_nexus/compile/data_widget.cljs"],"mappings":";AAMA,AAAKA,oDACH,iBAAMC,cAAO,gDAAA,hDAACC;AAAd,AACE;AAAA,AAAO,OAACC,mDAAMF,YAAOG;;;AAEzB,uDAAA,vDAAMC,sHAAqBC;AAA3B,AACE,GACE,AAACC,wBAAQ,AAAA,mFAAOD;AAAO,OAACE,6CAAK,WAAKC;AAAL,AAAW,QAACJ,qFAAAA,2FAAAA,RAAoBI,uEAAAA;GAAO,AAAA,mFAAOH;;AAD7E,GAEE,AAACI,qBAAK,AAAA,mFAAOJ;AAAO,OAACK,8CAAMC,gBAAM,AAACC,4CAAI,WAAAC;AAAA,AAAA,IAAAC,aAAAD;UAAA,AAAAE,4CAAAD,WAAA,IAAA,jEAAME;YAAN,AAAAD,4CAAAD,WAAA,IAAA,nEAAUG;AAAV,AAAA,uDAAmB,CAACb,qFAAAA,0FAAAA,PAAoBY,sEAAAA,MAAK,CAACZ,qFAAAA,4FAAAA,TAAoBa,wEAAAA;GAAS,AAAA,mFAAOZ;;AAF1H,GAGE,GAAK,AAACa,sBAAM,AAAA,mFAAOb;AAAQ,OAAA,mFAAOA;;AAHpC;;;;;AAMF,mDAAA,nDAAMc,8GAAiBd;AAAvB,AACE,GACE,GAAK,AAACa,sBAAMb;AADd,kDAAA,sGAAA,iEAAA,iFAAA,+EAAA,qDAAA,yDAAA,uGAAA,+DAAA,ziBAC0B,AAACN,wbAGC,4CAAKM,wJACCe;;AALlC,GAOE,AAACd,wBAAQD;AAPX,kDAAA,sGAAA,qDAAA,yDAAA,iEAAA,iFAAA,yEAAA,+DAAA,0IAAA,4EAAA,oOAAA,t3BAOsB,AAACN,+gBAGOsB,sNACM,AAACC,gDAAsBC,2CAAsBC,2GACzD,6CAAA,WAAAC,xDAAClB;AAAD,AAAO,wKAAAkB,+EAAAA,/OAACN,iFAAAA,mGAAAA;GAAmBd;;AAZnD,GAcE,AAACI,qBAAKJ;AAdR,kDAAA,sGAAA,iEAAA,iFAAA,yEAAA,qDAAA,mDAAA,+DAAA,0IAAA,4EAAA,2QAAA,v5BAcmB,AAACN,ygBAGOsB,sNACMK,uCAAa,AAACJ,gDAAsBC,2CAAsBC,2GACtE,AAACd,8CAAMC,gBAAM,AAACC,4CAAI,WAAAe;AAAA,AAAA,IAAAC,aAAAD;UAAA,AAAAZ,4CAAAa,WAAA,IAAA,jEAAMZ;WAAN,AAAAD,4CAAAa,WAAA,IAAA,lEAAUpB;AAAV,AAAA,uDAAA,2CAAA,qDAAA,2DAAA,sGAAA,jDACyB,4CAAKQ,uDACP,AAACjB,4DACN,CAACoB,iFAAAA,uFAAAA,RAAgBX,mEAAAA;GAAQH;;AAtBlF;;;;;AA0EF,oDAAA,pDAAMwB,gHAAkBxB;AAAxB,AAAA,kDAAA,uHAAA,iEAAA,iFAAA,+EAAA,+DAAA,iCAAA,qDAAA,gDAAA,2CAAA,sGAAA,iEAAA,kCAAA,qDAAA,qDAAA,+DAAA,0IAAA,2CAAA,sGAAA,iEAAA,kCAAA,8IAAA,+DAAA,kJAAA,2CAAA,sGAAA,iEAAA,kCAAA,qDAAA,6DAAA,+DAAA,0IAAA,2CAAA,sGAAA,iEAAA,kCAAA,sJAAA,+DAAA,kJAAA,2CAAA,sGAAA,iEAAA,kCAAA,qDAAA,6DAAA,+DAAA,0IAAA,2CAAA,sGAAA,iEAAA,kCAAA,qDAAA,iFAAA,4BAAA,+DAAA,iQAAA,2CAAA,sGAAA,iEAAA,kCAAA,qDAAA,0EAAA,+DAAA,0IAAA,2CAAA,sGAAA,iEAAA,kCAAA,qDAAA,iFAAA,4BAAA,+DAAA,kQAAA,2CAAA,sGAAA,iEAAA,iFAAA,+EAAA,qDAAA,oDAAA,+DAAA,0IAAA,2CAAA,sGAAA,iEAAA,iFAAA,+EAAA,7xMACO,4CAAK,AAACyB,4hBAGE,AAAC/B,mZAGO2B,oJACR,AAAC3B,4MAEC,AAAA,mFAAOM,wJACDe,4JAER,AAACrB,2ZAGO2B,oJACR,AAAC3B,4MAEC,AAAA,2FAAWM,wJACLe,4JAER,AAACrB,2ZAGO2B,oJACR,AAAC3B,2cAGO,sDAAA,mFAAA,MAAA,/IAACgC,2QACT,AAAChC,waAGO2B,oJACR,AAAC3B,2cAGO,uDAAA,mFAAA,MAAA,hJAACiC,4QAGT,AAACjC,ghBAGO2B,oJACR,AAAC3B,0UAEC,AAACQ,6CAAK,WAAK0B;AAAL,AAAA,kDAAA,uHAAA,iEAAA,iFAAA,+EAAA,qDAAA,gDAAA,2CAAA,uHAAA,iEAAA,kCAAA,qDAAA,qDAAA,+DAAA,0IAAA,2CAAA,uHAAA,iEAAA,kCAAA,6IAAA,+DAAA,oJAAA,+DAAA,vmDACO,4CAAK,AAACH,4bAEE,4CAAK,AAACA,wXAGEJ,oJAER,4CAAK,AAACI,iLAEJ,AAAA,mFAAOG,uJACDb;4FAzD9C,+DAAA,xJA0D0C,AAAA,kFAAOf","names":["enigma-nexus.compile.data-widget/continous-number","value*","reagent.core.atom","cljs.core.swap_BANG_","cljs.core/inc","enigma-nexus.compile.data-widget/decompile-from-tree","data","cljs.core/vector?","cljs.core.mapv","item","cljs.core/map?","cljs.core.apply","cljs.core/merge","cljs.core.map","p__59693","vec__59694","cljs.core.nth","key","value","cljs.core/coll?","enigma-nexus.compile.data-widget/compile-to-tree","enigma-nexus.data-widget.skins/cell-text-input","enigma-nexus.data-widget.skins/expand-collapse","enigma-nexus.data-widget.skins/nested-menu-init","enigma-nexus.compile.demo/figma-table-menu","enigma-nexus.compile.demo/tree-menu-ui-props","p1__59699#","enigma-nexus.data-widget.skins/map-key","p__59700","vec__59701","enigma-nexus.compile.data-widget/compile-neo-json","cljs.core/random-uuid","enigma-nexus.data-widget.skins/multi-select-menu-init","enigma-nexus.data-widget.skins/single-select-menu-init","dut"],"sourcesContent":["(ns enigma-nexus.compile.data-widget\r\n  (:require\r\n   [reagent.core :as r :refer [with-let]] \r\n   [enigma-nexus.compile.demo :as demo]\r\n   [enigma-nexus.data-widget.skins :as skin]))\r\n\r\n(def continous-number\r\n  (let [value* (r/atom 0)]\r\n    (fn [] (swap! value* inc))))\r\n\r\n(defn decompile-from-tree [data]\r\n  (cond\r\n    (vector? (:data data)) (mapv (fn [item] (decompile-from-tree item)) (:data data))\r\n    (map? (:data data)) (apply merge (map (fn [[key value]] {(decompile-from-tree key) (decompile-from-tree value)}) (:data data)))\r\n    (not (coll? (:data data))) (:data data)))\r\n\r\n\r\n(defn compile-to-tree [data]\r\n  (cond\r\n    (not (coll? data)) {:id (continous-number)\r\n                        :indicators #{:expanded}\r\n                        :type :scalar\r\n                        :data (str data)\r\n                        :component [skin/cell-text-input]} ; we need to be able w/o compilatation build a table widget that will present scalar\r\n\r\n    (vector? data) {:id (continous-number)\r\n                    :type :vector\r\n                    :indicators #{:tree}\r\n                    :component [skin/expand-collapse] \r\n                    :index-component [(skin/nested-menu-init demo/figma-table-menu demo/tree-menu-ui-props)]\r\n                    :data (mapv #(compile-to-tree %) data)}\r\n\r\n    (map? data) {:id (continous-number)\r\n                 :indicators #{:tree}\r\n                 :type :map\r\n                 :component [skin/expand-collapse]\r\n                 :index-component [skin/map-key (skin/nested-menu-init demo/figma-table-menu demo/tree-menu-ui-props)] \r\n                 :data (apply merge (map (fn [[key item]] {{:type :map-key\r\n                                                            :data (str key)\r\n                                                            :id (continous-number)}\r\n                                                           (compile-to-tree item)}) data))}))\r\n\r\n\r\n\r\n\r\n\r\n; data -> [schema] -> compile -> visual data -> data_widget -> UI -> decompile\r\n\r\n\r\n; (defn compile-to-figma-table [data]\r\n;   (cond\r\n;     (not (coll? data)) {:id (str (random-uuid))\r\n;                         :indicators #{:expanded}\r\n;                         :type :scalar\r\n;                         :data (str data)\r\n;                         :component [(skin/multi-select-menu-init [\"PTK\" \"JER\"])]}\r\n\r\n;     (vector? data) {:id (str (random-uuid))\r\n;                     :type :vector\r\n;                     :indicators #{:expanded (if (every? vector? data) :table)}\r\n;                     :component []\r\n;                     :data (vec (map-indexed (fn [index item] (compile-to-figma-table item)) data))}\r\n\r\n;     (map? data) {:id (str (random-uuid))\r\n;                  :indicators #{:expanded}\r\n;                  :type :map\r\n;                  :component []\r\n;                  :data (apply merge (map (fn [[key item]] {{:indicators #{:expanded}\r\n;                                                             :type :map-key\r\n;                                                             :data (str key)\r\n;                                                             :id (str (random-uuid))\r\n;                                                             :component [skin/map-key]}\r\n;                                                            (compile-to-figma-table item)}) data))}))\r\n\r\n\r\n; (def plus-kebab [[icons/kebab]\r\n;                  [[icons/plus]\r\n;                   [{:text \"Add Row 1\"\r\n;                     :action #(js/alert \"Row 1\")}]\r\n;                   [{:text \"Add Row 2\"\r\n;                     :action #(js/alert \"Row 2\")}]]\r\n                 \r\n;                  [{:text [icons/trash]\r\n;                    :action (fn [root* path]\r\n;                              ;; TODO fix for maps (currently can only delete items from vectors)\r\n;                              (swap! root* (fn [root]\r\n;                                             (let [path-one-before (pop path)\r\n;                                                   item-to-delete (get-in root path)]\r\n;                                               (update-in root path-one-before (fn [coll] (vec (remove #(= % item-to-delete) coll))))))))}]\r\n;                  [[icons/duplicate] [{:text \"duplicate\"}]]])\r\n\r\n\r\n(defn compile-neo-json [data]\r\n  {:id (str (random-uuid))\r\n   :indicators #{:expanded}\r\n   :component []\r\n   :data {{:id (continous-number)\r\n           :indicators #{}\r\n           :data :role\r\n           :component [skin/map-key]}\r\n          {:id (continous-number)\r\n           :indicators #{}\r\n           :data (:role data)\r\n           :component [skin/cell-text-input]}\r\n\r\n          {:id (continous-number)\r\n           :indicators #{}\r\n           :data :hostname\r\n           :component [skin/map-key]}\r\n          {:id (continous-number)\r\n           :indicators #{}\r\n           :data (:hostname data)\r\n           :component [skin/cell-text-input]}\r\n\r\n          {:id (continous-number)\r\n           :indicators #{}\r\n           :data :location\r\n           :component [skin/map-key]}\r\n          {:id (continous-number)\r\n           :indicators #{}\r\n           :data #{\"Haifa\"}\r\n           :component [(skin/multi-select-menu-init [\"PTK\" \"JER\"]) ]}\r\n          {:id (continous-number)\r\n           :indicators #{}\r\n           :data :single-location\r\n           :component [skin/map-key]}\r\n          {:id (continous-number)\r\n           :indicators #{}\r\n           :data #{\"Haifa\"}\r\n           :component [(skin/single-select-menu-init [\"PTK\" \"JER\"]) ]}\r\n\r\n\r\n          {:id (continous-number)\r\n           :indicators #{:expanded}\r\n           :data :DUTs\r\n           :component [skin/map-key]}\r\n          {:id (continous-number)\r\n           :indicators #{:expanded}\r\n           :data (mapv (fn [dut]\r\n                         {:id (str (random-uuid))\r\n                          :indicators #{:expanded}\r\n                          :data {{:id (str (random-uuid))\r\n                                  :indicators #{}\r\n                                  :data :name\r\n                                  :component [skin/map-key]}\r\n\r\n                                 {:id (str (random-uuid))\r\n                                  :indicators #{}\r\n                                  :data (:name dut)\r\n                                  :component [skin/cell-text-input ]}}\r\n                          :component []}) (:duts data))\r\n           :component []}}})\r\n"]}