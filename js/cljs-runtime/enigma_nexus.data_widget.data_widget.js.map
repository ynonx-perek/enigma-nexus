{"version":3,"sources":["enigma_nexus/data_widget/data_widget.cljs"],"mappings":"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","names":["enigma-nexus.data-widget.data-widget/indexes","coll","cljs.core/vector?","cljs.core.range","cljs.core/count","cljs.core.sort_by","cljs.core/keys","enigma-nexus.data-widget.data-widget/data-widget","props","map__74004","cljs.core/--destructure-map","cljs.core.get","root*","path","ui-props-fn","with-let74005","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__59154__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init74006","cljs.core/not","res74007","local-root*","reagent.core/cursor","map__74008","cljs.core/deref","data","indicators","index-component","component","id","control-component","ui-props","cljs.core/coll?","cljs.core.doall","cljs.core.map_indexed","skin-index","c","cljs.core.map","collection-index","or__5043__auto__","cljs.core.conj"],"sourcesContent":["(ns enigma-nexus.data-widget.data-widget\r\n  (:require\r\n   [reagent.core :as r :refer [with-let]]))\r\n\r\n(defn indexes [coll]\r\n  (if (vector? coll)\r\n    (range (count coll))\r\n    (sort-by :id (keys coll))))\r\n\r\n(defn data-widget [props]\r\n  (let [{:keys [root* path ui-props-fn]} props]\r\n    (r/with-let [local-root* (r/cursor root* path)]\r\n      (let [{:keys [data indicators index-component component id control-component]} @local-root*\r\n            ui-props (ui-props-fn root* path)]\r\n        [:div (:local-root ui-props)\r\n         (if (not (coll? data))\r\n           [:<>\r\n            (doall (map-indexed (fn [skin-index c]\r\n                                  ^{:key [skin-index]}\r\n                                  [c {:root* root* :path path :ui-props-fn ui-props-fn}]) component))]\r\n\r\n           \r\n           [:<>\r\n            (doall (map-indexed (fn [skin-index c]\r\n                                  ^{:key [skin-index]}\r\n                                  [c {:root* root* :path path :ui-props-fn ui-props-fn}]) component))\r\n            \r\n            [:div (:collection ui-props)\r\n\r\n             (if (:expanded indicators)\r\n               (doall (map (fn [collection-index]\r\n                             ^{:key [path \"collection-item\" (or (:id collection-index) collection-index)]}\r\n                             [:div (:collection-item ui-props)\r\n                              (if control-component\r\n                                (doall (map-indexed (fn [skin-index c]\r\n                                                      ^{:key [skin-index]}\r\n                                                      [c {:root* root*\r\n                                                          :path (conj path :data collection-index)\r\n                                                          :ui-props-fn ui-props-fn}]) control-component)))\r\n                              \r\n                              (if index-component\r\n                                (doall (map-indexed (fn [skin-index c]\r\n                                                      ^{:key [skin-index]}\r\n                                                      [c {:root* root*\r\n                                                          :path (conj path :data collection-index)\r\n                                                          :ui-props-fn ui-props-fn}]) index-component)))\r\n                                      ;; The key here binds the \"data_widget\" to the path.\r\n                                      ;; without it, change in path (i.e. for rename keys) will not invalidate the cursor, and so the value\r\n                                      ;; rendered will use the old value, which is empty\r\n                              [data-widget {:key (conj path :data collection-index)\r\n                                            :root* root*\r\n                                            :path (conj path :data collection-index)\r\n                                            :ui-props-fn ui-props-fn}]]) (indexes data))))]])]))))\r\n\r\n\r\n; (defn data-widget [props]\r\n;   (let [{:keys [root* path ui-props-fn]} props\r\n;         ui-props (ui-props-fn root* path)]\r\n    \r\n;     (r/with-let [component* (r/cursor root* (conj path :component))]\r\n;       (let [local_root (get-in @root* path)]\r\n;         (let [{:keys [data indicators index-component]} local_root]\r\n;           ^{:key path}\r\n;           [:div ui-props\r\n\r\n;            [:div {:class \"skins\"}\r\n;             (doall (map-indexed (fn [index c] [c {:key index :root* root* :path path}]) @component*))]\r\n\r\n;            [:div {:class \"children\"}\r\n;             (if (and (coll? data) (:expanded indicators))\r\n;               (doall (map (fn [index]\r\n;                             [:div {:class \"collection-item\" :key (or (:id index) index)}\r\n\r\n;                              (if index-component\r\n;                                (doall (map-indexed (fn [skin-index c] [c {:key skin-index :root* root* :path (conj path :data index)}]) index-component)))\r\n\r\n;                              [data-widget {:key [(conj path :data index)]\r\n;                                            :ui-props-fn ui-props-fn\r\n;                                            :root* root*\r\n;                                            :path (conj path :data index)}]]) (indexes data))))]])))))\r\n\t                             \r\n; red line for the pair (a: 10)\r\n                            ;;  [:div {:style {:margin \"10px\"\r\n                            ;;                 :border \"2px solid white\"\r\n                            ;;                 :background-color \"red\"\r\n                            ;;                 :padding \"10px\"\r\n                            ;;                 :display \"block\"}} (str (conj path :data index)\r\n                            ;;                                         \" - \"\r\n                            ;;                                         (get-in @root* (conj path :data index)))]\r\n"]}