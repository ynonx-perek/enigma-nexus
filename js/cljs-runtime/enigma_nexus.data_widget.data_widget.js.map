{"version":3,"sources":["enigma_nexus/data_widget/data_widget.cljs"],"mappings":";AAIA,+CAAA,/CAAMA,sGAASC;AAAf,AACE,GAAI,AAACC,wBAAQD;AACX,OAACE,8CAAM,AAACC,gBAAMH;;AACd,uDAAA,hDAACI,kGAAY,AAACC,eAAKL;;;AAGvB,mDAAA,nDAAMM,8GAAaC;AAAnB,AACE,IAAAC,aAA6CD;IAA7CC,iBAAA,AAAAC,4BAAAD;iBAAA,AAAAE,4CAAAF,eAAA,xEAAcG;WAAd,AAAAD,4CAAAF,eAAA,lEAAoBI;kBAApB,AAAAF,4CAAAF,eAAA,zEAAyBK;YAAzB,AAAAH,4CAAAF,eAAA,nEAAqCM;IAC/BC,WAAS,CAACF,4CAAAA,mEAAAA,zBAAYF,+CAAAA,pCAAMC,+CAAAA,1CAAKE,+CAAAA;AADvC,AAGE,IAAAE,gBAAA,AAAAC,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAF,6BAAA,AAAAI;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAR,2BAAA,AAAAI;;;AAAA,IAAAK,YAAA,CAAA,AAAAT,yBAAA;sBAAA,EAAA,EAAAS,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,0JAAA,CAAAA,cAAA,jRAAaY,+GAAW,AAACC,oBAASlB,WAAM,kDAAA,lDAACmB,6CAAKlB;IAA9Ce,WAAA,AACE,iBAAMI,OAAK,+CAAA,AAAAC,/CAACC,+DAAQtB,YAAMC;AAA1B,AACE,IAAAsB,aAAmDH;IAAnDG,iBAAA,AAAAzB,4BAAAyB;SAAA,AAAAxB,4CAAAwB,eAAA,hEAAcC;eAAd,AAAAzB,4CAAAwB,eAAA,tEAAiBH;iBAAjB,AAAArB,4CAAAwB,eAAA,xEAAsBE;sBAAtB,AAAA1B,4CAAAwB,eAAA,7EAAiCG;AAAjC,AAAA,2BAAA,mFAAA,4DAAA,mFAAA,mDAAA,2CAAA,wDAAA,lPAGQtB,kQAGJ,AAACuB,8CAAM,AAACC,oDAAY,WAAKC,MAAMC;AAAX,AAAA,4FAAA,2CAAA,0DAAA,iEAAA,xKAAeA,iGAAQD,4DAAa7B,gEAAYC;8CANxE,mFAAA,mDAAA,2CAAA,wDAAA,pRAMW,AAAAoB,gBAAsEJ,uRAG7E,kBAAI,iBAAAc,oBAAK,AAACC,sBAAMZ;AAAZ,AAAA,GAAAW;AAAkB,OAAA,yFAAWN;;AAA7BM;;MACF,AAACJ,8CAAM,AAACM,4CAAI,WAAKJ;AAAL,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,kBAAA,oDAEc,iBAAAK,mBAAI,AAAA,gFAAKL;AAAT,AAAA,oBAAAK;AAAAA;;AAAgBL;;aAE3B,kBAAIH,iBACF,AAACC,8CAAM,AAACC,oDAAY,WAAKO,WAAWL;AAAhB,AAAA,4FAAA,2CAAA,+DAAA,iEAAA,7KAAoBA,iGAAQK,iEAAkBnC,gEAAY,yDAAA,zDAACmB,oDAAKlB,4GAAW4B;2BALpG,oIAAA,2CAAA,oDAAA,uQAAA,+EAAA,iEAAA,uHAAA,vvBAIG,lBAC2GH,2GAE1G/B,mOAAmB,yDAAA,zDAACwB,oDAAKlB,4GAAW4B,uFACV3B,kEACNF,mEACA,AAACmB,6CAAKhB,MAAMsB,iEACb,yDAAA,zDAACN,oDAAKlB,4GAAW4B;kFArB1D,2CAAA,oDAAA,mFACUL,GAAGvB,3MAQT,zDAYiE,AAACb,6CAAQgC;;AAvBlF,AAAAJ","names":["enigma-nexus.data-widget.data-widget/indexes","coll","cljs.core/vector?","cljs.core.range","cljs.core/count","cljs.core.sort_by","cljs.core/keys","enigma-nexus.data-widget.data-widget/data-widget","props","map__71639","cljs.core/--destructure-map","cljs.core.get","root*","path","ui-props-fn","state","ui-props","with-let71640","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__59104__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init71641","cljs.core/not","res71642","component*","reagent.core/cursor","cljs.core.conj","data","cljs.core/deref","cljs.core.get_in","map__71643","id","indicators","index-component","cljs.core.doall","cljs.core.map_indexed","index","c","and__5041__auto__","cljs.core/coll?","cljs.core.map","or__5043__auto__","skin-index"],"sourcesContent":["(ns enigma-nexus.data-widget.data-widget\r\n  (:require\r\n   [reagent.core :as r :refer [with-let]]))\r\n\r\n(defn indexes [coll]\r\n  (if (vector? coll)\r\n    (range (count coll))\r\n    (sort-by :id (keys coll))))\r\n\r\n\r\n(defn data-widget [props]\r\n  (let [{:keys [root* path ui-props-fn state]} props\r\n        ui-props (ui-props-fn root* path state)]\r\n    \r\n    (r/with-let [component* (r/cursor root* (conj path :component))]\r\n      (let [data (get-in @root* path)]\r\n        (let [{:keys [id data indicators index-component]} data]\r\n          ^{:key [id path]}\r\n\r\n          [:div ui-props\r\n\r\n           [:div {:class \"skins\"}\r\n            (doall (map-indexed (fn [index c] [c {:key index :root* root* :path path}]) @component*))]\r\n\r\n           [:div {:class \"children\"}\r\n            (if (and (coll? data) (:expanded indicators))\r\n              (doall (map (fn [index]\r\n                            [:div {:class \"collection-item\"\r\n                                   :key (or (:id index) index)}\r\n\r\n                             (if index-component\r\n                               (doall (map-indexed (fn [skin-index c] [c {:key skin-index :root* root* :path (conj path :data index)}]) index-component)))\r\n\r\n                             [data-widget {:key [(conj path :data index)]\r\n                                           :ui-props-fn ui-props-fn\r\n                                           :root* root*\r\n                                           :state (conj state indicators)\r\n                                           :path (conj path :data index)}]]) (indexes data))))]])))))\r\n\r\n\r\n\r\n\t                             \r\n; red line for the pair (a: 10)\r\n                            ;;  [:div {:style {:margin \"10px\"\r\n                            ;;                 :border \"2px solid white\"\r\n                            ;;                 :background-color \"red\"\r\n                            ;;                 :padding \"10px\"\r\n                            ;;                 :display \"block\"}} (str (conj path :data index)\r\n                            ;;                                         \" - \"\r\n                            ;;                                         (get-in @root* (conj path :data index)))]\r\n"]}