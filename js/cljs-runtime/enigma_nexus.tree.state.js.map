{"version":3,"sources":["enigma_nexus/tree/state.cljs"],"mappings":"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","names":["enigma-nexus.tree.state/document-leaf","enigma-nexus.tree.state/demo-data-from-figma-working","reagent.core.atom","cljs.core/random-uuid","enigma-nexus.tree.skins/text-cell","enigma-nexus.tree.skins/expand-collapse","enigma-nexus.tree.state/cell-menu","enigma-nexus.tree.icons/kebab","enigma-nexus.tree.icons/plus","e","js/alert","enigma-nexus.tree.icons/duplicate","enigma-nexus.tree.icons/trash","enigma-nexus.tree.state/demo-table-data","enigma-nexus.table.skins/text-cell","enigma-nexus.table.compile/compile-to-tree","enigma-nexus.table.skins/tree-in-table","enigma-nexus.tree.state/demo-data-from-figma","enigma-nexus.tree.skins/table-in-tree"],"sourcesContent":["(ns enigma-nexus.tree.state\r\n  (:require \r\n   [reagent.core :as r :refer [with-let]] \r\n   [enigma-nexus.table.skins :as skin] \r\n   [enigma-nexus.table.compile :refer [compile-to-tree]]\r\n   [enigma-nexus.tree.skins :refer [text-cell cell-text-input expand-collapse table-in-tree]]\r\n   [enigma-nexus.table.table :refer [table]]\r\n   [enigma-nexus.tree.icons :as icons]))\r\n\r\n\r\n\r\n\r\n(defn document-leaf [] true)\r\n;(js/JSON.stringify (clj->js data))\r\n\r\n; (comment\r\n; ({\"id\":\"d66c62b4-e9b7-419b-945f-9ae467900693\",\r\n;  \"indicators\":[\"expanded\"],\r\n;  \"component\":[null],\r\n;  \"tree\":[{\"id\":\"37c395ab-e77e-4e1f-8fb4-c08bf8e3b9c6\",\r\n;  \t\t\t\t\t\t\t\t\t\"value\":0,\r\n;  \t\t\t\t\t\t\t\t\t\"indicators\":[],\r\n;  \t\t\t\t\t\t\t\t\t\"component\":[null,null]\r\n;  \t\t\t\t\t\t\t\t\t\"tree\":[{\"id\":\"7ebdfede-8baf-4e9c-9767-78165c120adb\",\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"indicators\":[\"expanded\"],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"component\":[null],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"tree\":[{\"id\":\"dd13adf3-bfea-44a3-8471-c9b4768af8be\",\r\n; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"value\":\":a\",\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"indicators\":[],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"component\":[null,null],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"tree\":[{\"id\":\"8dda964b-1396-4457-93ff-5d79cee697f0\",\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"indicators\":[\"expanded\"],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"component\":[null],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"tree\":[{\"value\":0,\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"id\":\"3224d045-7be3-483c-b8d9-5ee4adaea946\",\r\n; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"component\":[null,null]\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"indicators\":[],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"tree\":[{\"id\":\"bebc769d-6899-46d7-8505-7ce2ebdc9a4d\",\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"indicators\":[\"expanded\"],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"component\":[null],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"value\":1}]}]}]}]}]}]}\r\n; ))\r\n\r\n;; (defn compile-to-tree [data]\r\n;;   (cond\r\n;;     (not (coll? data)) (compile-scalar-to-tree data)\r\n;;     (vector? data) (compile-vector-to-tree data)\r\n;;     (map? data) (compile-map-to-tree data)))\r\n\r\n;; (defn compile-scalar-to-tree [data]\r\n;;   {:id (str (random-uuid))\r\n;;    :indicators #{:expanded}\r\n;;    :hint1 1\r\n;;    :value (if (keyword? data) (str data) data)\r\n;;    :component [cell-text-input]})\r\n\r\n;; (defn compile-vector-to-tree [data]\r\n;;   (vec (map-indexed (fn [index item] {:value index\r\n;;                                       :hint3 3\r\n;;                                       :indicators #{}\r\n;;                                       :tree (compile-to-tree item)\r\n;;                                       :id (str (random-uuid))\r\n;;                                       :component [cell-text-input expand-collapse]}) data)))\r\n\r\n;; (comment (defn array-to-tree [data]\r\n;;   {:id (str (random-uuid))\r\n;;    :indicators #{:expanded}\r\n;;    :hint1 1\r\n;;    :value (cond\r\n;;             (keyword? data) (str data)\r\n;;             (not (coll? data)) data\r\n;;             :else nil)\r\n   \r\n;;    :component [cell-text-input]\r\n;;    :tree (cond\r\n;;            (not (coll? data)) nil\r\n;;            (vector? data) (vec (map-indexed (fn [index item] {:value index\r\n;;                                                               :hint3 3\r\n;;                                                               :indicators #{}\r\n;;                                                               :tree [(array-to-tree item)]\r\n;;                                                               :id (str (random-uuid))\r\n;;                                                               :component [cell-text-input expand-collapse]}) data))\r\n\r\n;;            (map? data) (vec (map (fn [[key item]] {:value (if (keyword? key) (str key) key)\r\n;;                                                    :indicators #{}\r\n;;                                                    :tree [(array-to-tree item)]\r\n;;                                                    :id (str (random-uuid))\r\n;;                                                    :component [cell-text-input expand-collapse]}) data)))})\r\n;; )\r\n\r\n\r\n(def demo-data-from-figma-working (r/atom {:id (str (random-uuid))\r\n                                   :class \"main-tree\"\r\n                                   :value \"Task 2\"\r\n                                   :component [text-cell expand-collapse]\r\n                                   :indicators #{:expanded}\r\n                                   :tree [{:value \"Task 2.1\"\r\n                                           :id (str (random-uuid))\r\n                                           :indicators #{}\r\n                                           :component [text-cell expand-collapse]\r\n                                           :tree [{:value \"Task 2.1.1\"\r\n                                                   :indicators #{}\r\n                                                   :id (str (random-uuid))\r\n                                                   :component [text-cell expand-collapse]\r\n                                                   :tree [{:value \"document.txt\"\r\n                                                           :indicators #{}\r\n                                                           :id (str (random-uuid))\r\n                                                           :component [text-cell document-leaf]}\r\n                                                          {:value \"proposal.txt\"\r\n                                                           :indicators #{}\r\n                                                           :id (str (random-uuid))\r\n                                                           :component [text-cell document-leaf]}]}]}\r\n                                          \r\n                                          {:value \"Task 2.2\"\r\n                                           :indicators #{}\r\n                                           :id (str (random-uuid))\r\n                                           :component [text-cell]}]}))\r\n\r\n\r\n\r\n(def cell-menu {:class \"main-tree\"\r\n                :value [icons/kebab] \r\n                :type :click\r\n                :nodes [{:value [icons/plus] \r\n                         :type :click\r\n                         :nodes [{:value \"Drivers\"\r\n                                  :events {:on-click (fn [e]\r\n                                                       (. e stopPropagation)\r\n                                                       (js/alert \"Drivers\"))}}\r\n\r\n                                 {:value \"Images\"\r\n                                  :events {:on-click (fn [e]\r\n                                                       (. e stopPropagation)\r\n                                                       (js/alert \"Images\"))}}]}\r\n                        {:value [icons/duplicate]}\r\n                        {:value [icons/trash]}]})\r\n\r\n\r\n(def demo-table-data\r\n  {:id (str (random-uuid))\r\n   :expanded true \r\n   :rows [{:id (str (random-uuid))\r\n           :columns [{:id (str (random-uuid))\r\n                      :content \" [0,0] \"\r\n                      :indicators #{}\r\n                      :component [skin/text-cell]}\r\n                     {:id (str (random-uuid))\r\n                      :content (compile-to-tree [1 2 {:a 10 :b 20}])\r\n                      :indicators #{}\r\n                      :component [skin/tree-in-table]}\r\n                     {:id (str (random-uuid))\r\n                      :content \" [0,2] \"\r\n                      :indicators #{}\r\n                      :component [skin/text-cell]}]}\r\n          \r\n          {:id (str (random-uuid))\r\n           :columns [{:id (str (random-uuid))\r\n                      :content \" [1,0] \"\r\n                      :indicators #{}\r\n                      :component [skin/text-cell]}\r\n                     {:id (str (random-uuid))\r\n                      :content \" [1,1] \"\r\n                      :indicators #{}\r\n                      :component [skin/text-cell]}\r\n                     {:id (str (random-uuid))\r\n                      :content \" [1,2] \"\r\n                      :indicators #{}\r\n                      :component [skin/text-cell]}]}]})\r\n\r\n(def demo-data-from-figma (r/atom {:id (str (random-uuid))\r\n                                   :class \"main-tree\"\r\n                                   :value \"Task 2\"\r\n                                   :component [text-cell expand-collapse]\r\n                                   :indicators #{:expanded}\r\n                                   :tree [{:value \"Task 2.1\"\r\n                                           :id (str (random-uuid))\r\n                                           :indicators #{:expanded}\r\n                                           :component [text-cell expand-collapse]\r\n                                           :tree [{:value \"Task 2.1.1\"\r\n                                                   :indicators #{:expanded}\r\n                                                   :id (str (random-uuid))\r\n                                                   :component [text-cell expand-collapse]\r\n                                                   :tree [{:value \"failing to expand-collapse\"\r\n                                                           :indicators #{:expanded}\r\n                                                           :id (str (random-uuid))\r\n                                                           :component [text-cell expand-collapse]\r\n                                                           :tree [{:value \"also failing to expand-collapse\"\r\n                                                                   :indicators #{:expanded}\r\n                                                                   :id (str (random-uuid))\r\n                                                                   :component [text-cell expand-collapse]\r\n                                                                   :tree [{:value \"document.txt\"\r\n                                                                           :indicators #{:expanded}\r\n                                                                           :id (str (random-uuid))\r\n                                                                           :component [text-cell document-leaf]}]}]}]}\r\n\r\n                                                  {:value \"Table In Tree\"\r\n                                                   :indicators #{:expanded}\r\n                                                   :id (str (random-uuid))\r\n                                                   :component [text-cell expand-collapse]\r\n                                                   :tree [{:value demo-table-data\r\n                                                           :indicators #{:expanded}\r\n                                                           :id (str (random-uuid))\r\n                                                           :component [table-in-tree]}]}]}]}))\r\n\r\n\r\n;; [{:name {:value \"Intel\" :component [...]}\r\n;;   :size \"18M\"\r\n;;   :type \"dir\"\r\n;;   :children [\r\n;;              {:name {...}\r\n;;               :size \"1MB\"}\r\n;;              {:name {...}\r\n;;               :size \"2MB\"}\r\n;;              ]\r\n;;   :otherchildren [...]}\r\n \r\n;;  {:name \"Intel\"\r\n;;   :size \"18M\"\r\n;;   :type \"dir\"\r\n;;   :children [...]}\r\n;;  ]\r\n\r\n\r\n\r\n\r\n;; [\r\n;;  [{:value \"LAB-REPL\"\r\n;;    :type :click\r\n;;    :nodes []}\r\n;;   {:value \"18MB\"\r\n;;    :type :click\r\n;;    :nodes []}\r\n;;   {:value \"Directory\"\r\n;;    :tyle :click\r\n;;    :nodes []}]\r\n \r\n;;  {:value \"OUTLINE\"}\r\n;;  {:value \"TIMELINE\"}\r\n;;  {:value \"PROJECT TREE\"}\r\n;; ]"]}