{"version":3,"sources":["enigma_nexus/tree/state.cljs"],"mappings":"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","names":["enigma-nexus.tree.state/document-leaf","enigma-nexus.tree.state/decompile-from-tree","tree","G__71327","cljs.core/Keyword","js/Error","cljs.core.apply","cljs.core/merge","cljs.core.map","item","G__71328","cljs.core/first","cljs.core.mapv","G__71329","enigma-nexus.tree.state/compile-to-tree","data","cljs.core/coll?","cljs.core/random-uuid","enigma-nexus.tree.skins/cell-text-input","cljs.core/vector?","cljs.core/vec","cljs.core.map_indexed","index","enigma-nexus.tree.skins/expand-collapse","cljs.core/map?","p__71330","vec__71331","cljs.core.nth","key","enigma-nexus.tree.state/demo-data-from-figma-working","reagent.core.atom","enigma-nexus.tree.skins/text-cell","enigma-nexus.tree.state/cell-menu","enigma-nexus.tree.icons/kebab","enigma-nexus.tree.icons/plus","e","js/alert","enigma-nexus.tree.icons/duplicate","enigma-nexus.tree.icons/trash","enigma-nexus.tree.state/demo-table-data","enigma-nexus.table.skins/text-cell","enigma-nexus.table.skins/tree-in-table","enigma-nexus.tree.state/demo-data-from-figma","enigma-nexus.tree.state/demo-data-from-figma-2","enigma-nexus.tree.skins/table-in-tree"],"sourcesContent":["(ns enigma-nexus.tree.state\r\n  (:require \r\n   [reagent.core :as r :refer [with-let]] \r\n   [enigma-nexus.table.skins :as skin]\r\n   [enigma-nexus.tree.skins :refer [text-cell cell-text-input expand-collapse table-in-tree]]\r\n   [enigma-nexus.table.table :refer [table]]\r\n   [enigma-nexus.tree.icons :as icons]))\r\n\r\n\r\n\r\n\r\n(defn document-leaf [] true)\r\n;(js/JSON.stringify (clj->js data))\r\n\r\n; (comment\r\n; ({\"id\":\"d66c62b4-e9b7-419b-945f-9ae467900693\",\r\n;  \"indicators\":[\"expanded\"],\r\n;  \"component\":[null],\r\n;  \"tree\":[{\"id\":\"37c395ab-e77e-4e1f-8fb4-c08bf8e3b9c6\",\r\n;  \t\t\t\t\t\t\t\t\t\"value\":0,\r\n;  \t\t\t\t\t\t\t\t\t\"indicators\":[],\r\n;  \t\t\t\t\t\t\t\t\t\"component\":[null,null]\r\n;  \t\t\t\t\t\t\t\t\t\"tree\":[{\"id\":\"7ebdfede-8baf-4e9c-9767-78165c120adb\",\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"indicators\":[\"expanded\"],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"component\":[null],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"tree\":[{\"id\":\"dd13adf3-bfea-44a3-8471-c9b4768af8be\",\r\n; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"value\":\":a\",\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"indicators\":[],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"component\":[null,null],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"tree\":[{\"id\":\"8dda964b-1396-4457-93ff-5d79cee697f0\",\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"indicators\":[\"expanded\"],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"component\":[null],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"tree\":[{\"value\":0,\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"id\":\"3224d045-7be3-483c-b8d9-5ee4adaea946\",\r\n; \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"component\":[null,null]\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"indicators\":[],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"tree\":[{\"id\":\"bebc769d-6899-46d7-8505-7ce2ebdc9a4d\",\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"indicators\":[\"expanded\"],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"component\":[null],\r\n;  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"value\":1}]}]}]}]}]}]}\r\n; ))\r\n\r\n;; (defn compile-to-tree [data]\r\n;;   (cond\r\n;;     (not (coll? data)) (compile-scalar-to-tree data)\r\n;;     (vector? data) (compile-vector-to-tree data)\r\n;;     (map? data) (compile-map-to-tree data)))\r\n\r\n;; (defn compile-scalar-to-tree [data]\r\n;;   {:id (str (random-uuid))\r\n;;    :indicators #{:expanded}\r\n;;    :hint1 1\r\n;;    :value (if (keyword? data) (str data) data)\r\n;;    :component [cell-text-input]})\r\n\r\n;; (defn compile-vector-to-tree [data]\r\n;;   (vec (map-indexed (fn [index item] {:value index\r\n;;                                       :hint3 3\r\n;;                                       :indicators #{}\r\n;;                                       :tree (compile-to-tree item)\r\n;;                                       :id (str (random-uuid))\r\n;;                                       :component [cell-text-input expand-collapse]}) data)))\r\n\r\n;; (comment (defn array-to-tree [data]\r\n;;   {:id (str (random-uuid))\r\n;;    :indicators #{:expanded}\r\n;;    :hint1 1\r\n;;    :value (cond\r\n;;             (keyword? data) (str data)\r\n;;             (not (coll? data)) data\r\n;;             :else nil)\r\n   \r\n;;    :component [cell-text-input]\r\n;;    :tree (cond\r\n;;            (not (coll? data)) nil\r\n;;            (vector? data) (vec (map-indexed (fn [index item] {:value index\r\n;;                                                               :hint3 3\r\n;;                                                               :indicators #{}\r\n;;                                                               :tree [(array-to-tree item)]\r\n;;                                                               :id (str (random-uuid))\r\n;;                                                               :component [cell-text-input expand-collapse]}) data))\r\n\r\n;;            (map? data) (vec (map (fn [[key item]] {:value (if (keyword? key) (str key) key)\r\n;;                                                    :indicators #{}\r\n;;                                                    :tree [(array-to-tree item)]\r\n;;                                                    :id (str (random-uuid))\r\n;;                                                    :component [cell-text-input expand-collapse]}) data)))})\r\n;; )\r\n\r\n(defn decompile-from-tree [tree]\r\n  (case (:type tree)\r\n    :scalar (:value tree)\r\n    :map (apply merge (map (fn [item] {(:value item) (decompile-from-tree (first (:tree item)))}) (:tree tree)))\r\n\r\n    :vector (mapv (fn [item] (decompile-from-tree (first (:tree item)))) (:tree tree))))\r\n\r\n(defn compile-to-tree [data]\r\n  (cond\r\n    (not (coll? data)) {:id (str (random-uuid))\r\n                        :indicators #{:expanded}\r\n                        :type :scalar\r\n                        :value (if (keyword? data) (str data) data)\r\n                        :component [cell-text-input]}\r\n\r\n    (vector? data) {:id (str (random-uuid))\r\n                    :indicators #{:expanded}\r\n                    :type :vector\r\n                    :component [cell-text-input]\r\n                    :tree (vec (map-indexed (fn [index item] {:value index\r\n                                                              :type :array-index\r\n                                                              :indicators #{}\r\n                                                              :tree [(compile-to-tree item)]\r\n                                                              :id (str (random-uuid))\r\n                                                              :component [cell-text-input expand-collapse]}) data))}\r\n\r\n\r\n    (map? data) {:id (str (random-uuid))\r\n                 :indicators #{:expanded}\r\n                 :type :map\r\n                 :component [cell-text-input]\r\n                 :tree (vec (map (fn [[key item]] {:value (if (keyword? key) (str key) key)\r\n                                                   :indicators #{}\r\n                                                   :type :map-key\r\n                                                   :tree [(compile-to-tree item)]\r\n                                                   :id (str (random-uuid))\r\n                                                   :component [cell-text-input expand-collapse]}) data))}))\r\n\r\n(def demo-data-from-figma-working (r/atom {:id (str (random-uuid))\r\n                                   :class \"main-tree\"\r\n                                   :value \"Task 2\"\r\n                                   :component [text-cell expand-collapse]\r\n                                   :indicators #{:expanded}\r\n                                   :tree [{:value \"Task 2.1\"\r\n                                           :id (str (random-uuid))\r\n                                           :indicators #{}\r\n                                           :component [text-cell expand-collapse]\r\n                                           :tree [{:value \"Task 2.1.1\"\r\n                                                   :indicators #{}\r\n                                                   :id (str (random-uuid))\r\n                                                   :component [text-cell expand-collapse]\r\n                                                   :tree [{:value \"document.txt\"\r\n                                                           :indicators #{}\r\n                                                           :id (str (random-uuid))\r\n                                                           :component [text-cell document-leaf]}\r\n                                                          {:value \"proposal.txt\"\r\n                                                           :indicators #{}\r\n                                                           :id (str (random-uuid))\r\n                                                           :component [text-cell document-leaf]}]}]}\r\n                                          \r\n                                          {:value \"Task 2.2\"\r\n                                           :indicators #{}\r\n                                           :id (str (random-uuid))\r\n                                           :component [text-cell]}]}))\r\n\r\n\r\n\r\n(def cell-menu {:class \"main-tree\"\r\n                :value [icons/kebab] \r\n                :type :click\r\n                :nodes [{:value [icons/plus] \r\n                         :type :click\r\n                         :nodes [{:value \"Drivers\"\r\n                                  :events {:on-click (fn [e]\r\n                                                       (. e stopPropagation)\r\n                                                       (js/alert \"Drivers\"))}}\r\n\r\n                                 {:value \"Images\"\r\n                                  :events {:on-click (fn [e]\r\n                                                       (. e stopPropagation)\r\n                                                       (js/alert \"Images\"))}}]}\r\n                        {:value [icons/duplicate]}\r\n                        {:value [icons/trash]}]})\r\n\r\n\r\n(def demo-table-data\r\n  {:id (str (random-uuid))\r\n   :expanded true \r\n   :rows [{:id (str (random-uuid))\r\n           :columns [{:id (str (random-uuid))\r\n                      :content \" [0,0] \"\r\n                      :indicators #{}\r\n                      :component [skin/text-cell]}\r\n                     {:id (str (random-uuid))\r\n                      :content (compile-to-tree [1 2 {:a 10 :b 20}])\r\n                      :indicators #{}\r\n                      :component [skin/tree-in-table]}\r\n                     {:id (str (random-uuid))\r\n                      :content \" [0,2] \"\r\n                      :indicators #{}\r\n                      :component [skin/text-cell]}]}\r\n          \r\n          {:id (str (random-uuid))\r\n           :columns [{:id (str (random-uuid))\r\n                      :content \" [1,0] \"\r\n                      :indicators #{}\r\n                      :component [skin/text-cell]}\r\n                     {:id (str (random-uuid))\r\n                      :content \" [1,1] \"\r\n                      :indicators #{}\r\n                      :component [skin/text-cell]}\r\n                     {:id (str (random-uuid))\r\n                      :content \" [1,2] \"\r\n                      :indicators #{}\r\n                      :component [skin/text-cell]}]}]})\r\n\r\n(def demo-data-from-figma (r/atom {:id (str (random-uuid))\r\n                                   :component []\r\n                                   :indicators #{:expanded}\r\n                                   :value nil\r\n                                   :tree [{:id (str (random-uuid))\r\n                                           :class \"main-tree\"\r\n                                           :value \"Task 1\"\r\n                                           :component [text-cell expand-collapse]\r\n                                           :indicators #{:expanded}\r\n                                           :tree []}\r\n                                          \r\n                                          {:id (str (random-uuid))\r\n                                           :class \"main-tree\"\r\n                                           :value \"Projects\"\r\n                                           :component [text-cell expand-collapse]\r\n                                           :indicators #{:expanded}\r\n                                           :tree []}\r\n                                          \r\n                                          {:id (str (random-uuid))\r\n                                           :class \"main-tree\"\r\n                                           :value \"Task 2\"\r\n                                           :component [text-cell expand-collapse]\r\n                                           :indicators #{:expanded}\r\n                                           :tree [{:value \"Task 2.1\"\r\n                                                   :id (str (random-uuid))\r\n                                                   :indicators #{:expanded}\r\n                                                   :component [text-cell expand-collapse]\r\n                                                   :tree [{:value \"Task 2.1.1\"\r\n                                                           :indicators #{:expanded}\r\n                                                           :id (str (random-uuid))\r\n                                                           :component [text-cell expand-collapse]\r\n                                                           :tree [{:value \"document.txt\"\r\n                                                                   :indicators #{:expanded}\r\n                                                                   :id (str (random-uuid))\r\n                                                                   :component [text-cell document-leaf]}\r\n                                                                  {:value \"proposal.txt\"\r\n                                                                   :indicators #{:expanded}\r\n                                                                   :id (str (random-uuid))\r\n                                                                   :component [text-cell document-leaf]}]}\r\n\r\n                                                          {:value \"Task 2.1.2\"\r\n                                                           :indicators #{:expanded}\r\n                                                           :id (str (random-uuid))\r\n                                                           :component [text-cell expand-collapse]\r\n                                                           :tree []}]}\r\n\r\n                                                  {:value \"Task 2.2\"\r\n                                                   :indicators #{:expanded}\r\n                                                   :id (str (random-uuid))\r\n                                                   :component [text-cell expand-collapse]\r\n                                                   :tree []}]}]}))\r\n\r\n\r\n(def demo-data-from-figma-2 (r/atom {:id (str (random-uuid))\r\n                                   :class \"main-tree\"\r\n                                   :value \"Task 2\"\r\n                                   :component [text-cell expand-collapse]\r\n                                   :indicators #{:expanded}\r\n                                   :tree [{:value \"Task 2.1\"\r\n                                           :id (str (random-uuid))\r\n                                           :indicators #{:expanded}\r\n                                           :component [text-cell expand-collapse]\r\n                                           :tree [{:value \"Task 2.1.1\"\r\n                                                   :indicators #{:expanded}\r\n                                                   :id (str (random-uuid))\r\n                                                   :component [text-cell expand-collapse]\r\n                                                   :tree [{:value \"failing to expand-collapse\"\r\n                                                           :indicators #{:expanded}\r\n                                                           :id (str (random-uuid))\r\n                                                           :component [text-cell expand-collapse]\r\n                                                           :tree [{:value \"also failing to expand-collapse\"\r\n                                                                   :indicators #{:expanded}\r\n                                                                   :id (str (random-uuid))\r\n                                                                   :component [text-cell expand-collapse]\r\n                                                                   :tree [{:value \"document.txt\"\r\n                                                                           :indicators #{:expanded}\r\n                                                                           :id (str (random-uuid))\r\n                                                                           :component [text-cell document-leaf]}]}]}]}\r\n\r\n                                                  {:value \"Table In Tree\"\r\n                                                   :indicators #{:expanded}\r\n                                                   :id (str (random-uuid))\r\n                                                   :component [text-cell expand-collapse]\r\n                                                   :tree [{:value demo-table-data\r\n                                                           :indicators #{:expanded}\r\n                                                           :id (str (random-uuid))\r\n                                                           :component [table-in-tree]}]}]}]}))\r\n\r\n;; [{:name {:value \"Intel\" :component [...]}\r\n;;   :size \"18M\"\r\n;;   :type \"dir\"\r\n;;   :children [\r\n;;              {:name {...}\r\n;;               :size \"1MB\"}\r\n;;              {:name {...}\r\n;;               :size \"2MB\"}\r\n;;              ]\r\n;;   :otherchildren [...]}\r\n \r\n;;  {:name \"Intel\"\r\n;;   :size \"18M\"\r\n;;   :type \"dir\"\r\n;;   :children [...]}\r\n;;  ]\r\n\r\n\r\n\r\n\r\n;; [\r\n;;  [{:value \"LAB-REPL\"\r\n;;    :type :click\r\n;;    :nodes []}\r\n;;   {:value \"18MB\"\r\n;;    :type :click\r\n;;    :nodes []}\r\n;;   {:value \"Directory\"\r\n;;    :tyle :click\r\n;;    :nodes []}]\r\n \r\n;;  {:value \"OUTLINE\"}\r\n;;  {:value \"TIMELINE\"}\r\n;;  {:value \"PROJECT TREE\"}\r\n;; ]"]}